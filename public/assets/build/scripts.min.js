function toLatin(e){for(var t=["Я","я","Ю","ю","Ч","ч","Ш","ш","Щ","щ","Ж","ж","А","а","Б","б","В","в","Г","г","Д","д","Е","е","Ё","ё","З","з","И","и","Й","й","К","к","Л","л","М","м","Н","н","О","о","П","п","Р","р","С","с","Т","т","У","у","Ф","ф","Х","х","Ц","ц","Ы","ы","Ь","ь","Ъ","ъ","Э","э"],n=["Ya","ya","Yu","yu","Ch","ch","Sh","sh","Sh","sh","Zh","zh","A","a","B","b","V","v","G","g","D","d","E","e","E","e","Z","z","I","i","J","j","K","k","L","l","M","m","N","n","O","o","P","p","R","r","S","s","T","t","U","u","F","f","H","h","C","c","Y","y","","","","","E","e"],i=0,r=t.length;i<r;i++){var s=new RegExp(t[i],"g");e=e.replace(s,n[i])}return e}!function(e,t){"use strict";"object"==typeof module&&"object"==typeof module.exports?module.exports=e.document?t(e,!0):function(e){if(!e.document)throw new Error("jQuery requires a window with a document");return t(e)}:t(e)}("undefined"!=typeof window?window:this,function(e,t){"use strict";function n(e,t){t=t||ne;var n=t.createElement("script");n.text=e,t.head.appendChild(n).parentNode.removeChild(n)}function i(e){var t=!!e&&"length"in e&&e.length,n=pe.type(e);return"function"!==n&&!pe.isWindow(e)&&("array"===n||0===t||"number"==typeof t&&t>0&&t-1 in e)}function r(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()}function s(e,t,n){return pe.isFunction(t)?pe.grep(e,function(e,i){return!!t.call(e,i,e)!==n}):t.nodeType?pe.grep(e,function(e){return e===t!==n}):"string"!=typeof t?pe.grep(e,function(e){return ae.call(t,e)>-1!==n}):Ce.test(t)?pe.filter(t,e,n):(t=pe.filter(t,e),pe.grep(e,function(e){return ae.call(t,e)>-1!==n&&1===e.nodeType}))}function o(e,t){for(;(e=e[t])&&1!==e.nodeType;);return e}function a(e){var t={};return pe.each(e.match($e)||[],function(e,n){t[n]=!0}),t}function l(e){return e}function u(e){throw e}function c(e,t,n,i){var r;try{e&&pe.isFunction(r=e.promise)?r.call(e).done(t).fail(n):e&&pe.isFunction(r=e.then)?r.call(e,t,n):t.apply(void 0,[e].slice(i))}catch(e){n.apply(void 0,[e])}}function h(){ne.removeEventListener("DOMContentLoaded",h),e.removeEventListener("load",h),pe.ready()}function d(){this.expando=pe.expando+d.uid++}function f(e){return"true"===e||"false"!==e&&("null"===e?null:e===+e+""?+e:Re.test(e)?JSON.parse(e):e)}function p(e,t,n){var i;if(void 0===n&&1===e.nodeType)if(i="data-"+t.replace(Pe,"-$&").toLowerCase(),"string"==typeof(n=e.getAttribute(i))){try{n=f(n)}catch(e){}qe.set(e,t,n)}else n=void 0;return n}function g(e,t,n,i){var r,s=1,o=20,a=i?function(){return i.cur()}:function(){return pe.css(e,t,"")},l=a(),u=n&&n[3]||(pe.cssNumber[t]?"":"px"),c=(pe.cssNumber[t]||"px"!==u&&+l)&&Oe.exec(pe.css(e,t));if(c&&c[3]!==u){u=u||c[3],n=n||[],c=+l||1;do{s=s||".5",c/=s,pe.style(e,t,c+u)}while(s!==(s=a()/l)&&1!==s&&--o)}return n&&(c=+c||+l||0,r=n[1]?c+(n[1]+1)*n[2]:+n[2],i&&(i.unit=u,i.start=c,i.end=r)),r}function m(e){var t,n=e.ownerDocument,i=e.nodeName,r=ze[i];return r||(t=n.body.appendChild(n.createElement(i)),r=pe.css(t,"display"),t.parentNode.removeChild(t),"none"===r&&(r="block"),ze[i]=r,r)}function v(e,t){for(var n,i,r=[],s=0,o=e.length;s<o;s++)i=e[s],i.style&&(n=i.style.display,t?("none"===n&&(r[s]=Me.get(i,"display")||null,r[s]||(i.style.display="")),""===i.style.display&&Fe(i)&&(r[s]=m(i))):"none"!==n&&(r[s]="none",Me.set(i,"display",n)));for(s=0;s<o;s++)null!=r[s]&&(e[s].style.display=r[s]);return e}function y(e,t){var n;return n=void 0!==e.getElementsByTagName?e.getElementsByTagName(t||"*"):void 0!==e.querySelectorAll?e.querySelectorAll(t||"*"):[],void 0===t||t&&r(e,t)?pe.merge([e],n):n}function b(e,t){for(var n=0,i=e.length;n<i;n++)Me.set(e[n],"globalEval",!t||Me.get(t[n],"globalEval"))}function _(e,t,n,i,r){for(var s,o,a,l,u,c,h=t.createDocumentFragment(),d=[],f=0,p=e.length;f<p;f++)if((s=e[f])||0===s)if("object"===pe.type(s))pe.merge(d,s.nodeType?[s]:s);else if(Ge.test(s)){for(o=o||h.appendChild(t.createElement("div")),a=(Ue.exec(s)||["",""])[1].toLowerCase(),l=Xe[a]||Xe._default,o.innerHTML=l[1]+pe.htmlPrefilter(s)+l[2],c=l[0];c--;)o=o.lastChild;pe.merge(d,o.childNodes),o=h.firstChild,o.textContent=""}else d.push(t.createTextNode(s));for(h.textContent="",f=0;s=d[f++];)if(i&&pe.inArray(s,i)>-1)r&&r.push(s);else if(u=pe.contains(s.ownerDocument,s),o=y(h.appendChild(s),"script"),u&&b(o),n)for(c=0;s=o[c++];)Ve.test(s.type||"")&&n.push(s);return h}function x(){return!0}function w(){return!1}function k(){try{return ne.activeElement}catch(e){}}function C(e,t,n,i,r,s){var o,a;if("object"==typeof t){"string"!=typeof n&&(i=i||n,n=void 0);for(a in t)C(e,a,n,i,t[a],s);return e}if(null==i&&null==r?(r=n,i=n=void 0):null==r&&("string"==typeof n?(r=i,i=void 0):(r=i,i=n,n=void 0)),!1===r)r=w;else if(!r)return e;return 1===s&&(o=r,r=function(e){return pe().off(e),o.apply(this,arguments)},r.guid=o.guid||(o.guid=pe.guid++)),e.each(function(){pe.event.add(this,t,r,i,n)})}function T(e,t){return r(e,"table")&&r(11!==t.nodeType?t:t.firstChild,"tr")?pe(">tbody",e)[0]||e:e}function E(e){return e.type=(null!==e.getAttribute("type"))+"/"+e.type,e}function j(e){var t=nt.exec(e.type);return t?e.type=t[1]:e.removeAttribute("type"),e}function S(e,t){var n,i,r,s,o,a,l,u;if(1===t.nodeType){if(Me.hasData(e)&&(s=Me.access(e),o=Me.set(t,s),u=s.events)){delete o.handle,o.events={};for(r in u)for(n=0,i=u[r].length;n<i;n++)pe.event.add(t,r,u[r][n])}qe.hasData(e)&&(a=qe.access(e),l=pe.extend({},a),qe.set(t,l))}}function $(e,t){var n=t.nodeName.toLowerCase();"input"===n&&We.test(e.type)?t.checked=e.checked:"input"!==n&&"textarea"!==n||(t.defaultValue=e.defaultValue)}function A(e,t,i,r){t=se.apply([],t);var s,o,a,l,u,c,h=0,d=e.length,f=d-1,p=t[0],g=pe.isFunction(p);if(g||d>1&&"string"==typeof p&&!fe.checkClone&&tt.test(p))return e.each(function(n){var s=e.eq(n);g&&(t[0]=p.call(this,n,s.html())),A(s,t,i,r)});if(d&&(s=_(t,e[0].ownerDocument,!1,e,r),o=s.firstChild,1===s.childNodes.length&&(s=o),o||r)){for(a=pe.map(y(s,"script"),E),l=a.length;h<d;h++)u=s,h!==f&&(u=pe.clone(u,!0,!0),l&&pe.merge(a,y(u,"script"))),i.call(e[h],u,h);if(l)for(c=a[a.length-1].ownerDocument,pe.map(a,j),h=0;h<l;h++)u=a[h],Ve.test(u.type||"")&&!Me.access(u,"globalEval")&&pe.contains(c,u)&&(u.src?pe._evalUrl&&pe._evalUrl(u.src):n(u.textContent.replace(it,""),c))}return e}function N(e,t,n){for(var i,r=t?pe.filter(t,e):e,s=0;null!=(i=r[s]);s++)n||1!==i.nodeType||pe.cleanData(y(i)),i.parentNode&&(n&&pe.contains(i.ownerDocument,i)&&b(y(i,"script")),i.parentNode.removeChild(i));return e}function D(e,t,n){var i,r,s,o,a=e.style;return n=n||ot(e),n&&(o=n.getPropertyValue(t)||n[t],""!==o||pe.contains(e.ownerDocument,e)||(o=pe.style(e,t)),!fe.pixelMarginRight()&&st.test(o)&&rt.test(t)&&(i=a.width,r=a.minWidth,s=a.maxWidth,a.minWidth=a.maxWidth=a.width=o,o=n.width,a.width=i,a.minWidth=r,a.maxWidth=s)),void 0!==o?o+"":o}function L(e,t){return{get:function(){return e()?void delete this.get:(this.get=t).apply(this,arguments)}}}function M(e){if(e in dt)return e;for(var t=e[0].toUpperCase()+e.slice(1),n=ht.length;n--;)if((e=ht[n]+t)in dt)return e}function q(e){var t=pe.cssProps[e];return t||(t=pe.cssProps[e]=M(e)||e),t}function R(e,t,n){var i=Oe.exec(t);return i?Math.max(0,i[2]-(n||0))+(i[3]||"px"):t}function P(e,t,n,i,r){var s,o=0;for(s=n===(i?"border":"content")?4:"width"===t?1:0;s<4;s+=2)"margin"===n&&(o+=pe.css(e,n+He[s],!0,r)),i?("content"===n&&(o-=pe.css(e,"padding"+He[s],!0,r)),"margin"!==n&&(o-=pe.css(e,"border"+He[s]+"Width",!0,r))):(o+=pe.css(e,"padding"+He[s],!0,r),"padding"!==n&&(o+=pe.css(e,"border"+He[s]+"Width",!0,r)));return o}function I(e,t,n){var i,r=ot(e),s=D(e,t,r),o="border-box"===pe.css(e,"boxSizing",!1,r);return st.test(s)?s:(i=o&&(fe.boxSizingReliable()||s===e.style[t]),"auto"===s&&(s=e["offset"+t[0].toUpperCase()+t.slice(1)]),(s=parseFloat(s)||0)+P(e,t,n||(o?"border":"content"),i,r)+"px")}function O(e,t,n,i,r){return new O.prototype.init(e,t,n,i,r)}function H(){pt&&(!1===ne.hidden&&e.requestAnimationFrame?e.requestAnimationFrame(H):e.setTimeout(H,pe.fx.interval),pe.fx.tick())}function F(){return e.setTimeout(function(){ft=void 0}),ft=pe.now()}function B(e,t){var n,i=0,r={height:e};for(t=t?1:0;i<4;i+=2-t)n=He[i],r["margin"+n]=r["padding"+n]=e;return t&&(r.opacity=r.width=e),r}function z(e,t,n){for(var i,r=(V.tweeners[t]||[]).concat(V.tweeners["*"]),s=0,o=r.length;s<o;s++)if(i=r[s].call(n,t,e))return i}function W(e,t,n){var i,r,s,o,a,l,u,c,h="width"in t||"height"in t,d=this,f={},p=e.style,g=e.nodeType&&Fe(e),m=Me.get(e,"fxshow");n.queue||(o=pe._queueHooks(e,"fx"),null==o.unqueued&&(o.unqueued=0,a=o.empty.fire,o.empty.fire=function(){o.unqueued||a()}),o.unqueued++,d.always(function(){d.always(function(){o.unqueued--,pe.queue(e,"fx").length||o.empty.fire()})}));for(i in t)if(r=t[i],gt.test(r)){if(delete t[i],s=s||"toggle"===r,r===(g?"hide":"show")){if("show"!==r||!m||void 0===m[i])continue;g=!0}f[i]=m&&m[i]||pe.style(e,i)}if((l=!pe.isEmptyObject(t))||!pe.isEmptyObject(f)){h&&1===e.nodeType&&(n.overflow=[p.overflow,p.overflowX,p.overflowY],u=m&&m.display,null==u&&(u=Me.get(e,"display")),c=pe.css(e,"display"),"none"===c&&(u?c=u:(v([e],!0),u=e.style.display||u,c=pe.css(e,"display"),v([e]))),("inline"===c||"inline-block"===c&&null!=u)&&"none"===pe.css(e,"float")&&(l||(d.done(function(){p.display=u}),null==u&&(c=p.display,u="none"===c?"":c)),p.display="inline-block")),n.overflow&&(p.overflow="hidden",d.always(function(){p.overflow=n.overflow[0],p.overflowX=n.overflow[1],p.overflowY=n.overflow[2]})),l=!1;for(i in f)l||(m?"hidden"in m&&(g=m.hidden):m=Me.access(e,"fxshow",{display:u}),s&&(m.hidden=!g),g&&v([e],!0),d.done(function(){g||v([e]),Me.remove(e,"fxshow");for(i in f)pe.style(e,i,f[i])})),l=z(g?m[i]:0,i,d),i in m||(m[i]=l.start,g&&(l.end=l.start,l.start=0))}}function U(e,t){var n,i,r,s,o;for(n in e)if(i=pe.camelCase(n),r=t[i],s=e[n],Array.isArray(s)&&(r=s[1],s=e[n]=s[0]),n!==i&&(e[i]=s,delete e[n]),(o=pe.cssHooks[i])&&"expand"in o){s=o.expand(s),delete e[i];for(n in s)n in e||(e[n]=s[n],t[n]=r)}else t[i]=r}function V(e,t,n){var i,r,s=0,o=V.prefilters.length,a=pe.Deferred().always(function(){delete l.elem}),l=function(){if(r)return!1;for(var t=ft||F(),n=Math.max(0,u.startTime+u.duration-t),i=n/u.duration||0,s=1-i,o=0,l=u.tweens.length;o<l;o++)u.tweens[o].run(s);return a.notifyWith(e,[u,s,n]),s<1&&l?n:(l||a.notifyWith(e,[u,1,0]),a.resolveWith(e,[u]),!1)},u=a.promise({elem:e,props:pe.extend({},t),opts:pe.extend(!0,{specialEasing:{},easing:pe.easing._default},n),originalProperties:t,originalOptions:n,startTime:ft||F(),duration:n.duration,tweens:[],createTween:function(t,n){var i=pe.Tween(e,u.opts,t,n,u.opts.specialEasing[t]||u.opts.easing);return u.tweens.push(i),i},stop:function(t){var n=0,i=t?u.tweens.length:0;if(r)return this;for(r=!0;n<i;n++)u.tweens[n].run(1);return t?(a.notifyWith(e,[u,1,0]),a.resolveWith(e,[u,t])):a.rejectWith(e,[u,t]),this}}),c=u.props;for(U(c,u.opts.specialEasing);s<o;s++)if(i=V.prefilters[s].call(u,e,c,u.opts))return pe.isFunction(i.stop)&&(pe._queueHooks(u.elem,u.opts.queue).stop=pe.proxy(i.stop,i)),i;return pe.map(c,z,u),pe.isFunction(u.opts.start)&&u.opts.start.call(e,u),u.progress(u.opts.progress).done(u.opts.done,u.opts.complete).fail(u.opts.fail).always(u.opts.always),pe.fx.timer(pe.extend(l,{elem:e,anim:u,queue:u.opts.queue})),u}function X(e){return(e.match($e)||[]).join(" ")}function G(e){return e.getAttribute&&e.getAttribute("class")||""}function K(e,t,n,i){var r;if(Array.isArray(t))pe.each(t,function(t,r){n||Et.test(e)?i(e,r):K(e+"["+("object"==typeof r&&null!=r?t:"")+"]",r,n,i)});else if(n||"object"!==pe.type(t))i(e,t);else for(r in t)K(e+"["+r+"]",t[r],n,i)}function Q(e){return function(t,n){"string"!=typeof t&&(n=t,t="*");var i,r=0,s=t.toLowerCase().match($e)||[];if(pe.isFunction(n))for(;i=s[r++];)"+"===i[0]?(i=i.slice(1)||"*",(e[i]=e[i]||[]).unshift(n)):(e[i]=e[i]||[]).push(n)}}function Y(e,t,n,i){function r(a){var l;return s[a]=!0,pe.each(e[a]||[],function(e,a){var u=a(t,n,i);return"string"!=typeof u||o||s[u]?o?!(l=u):void 0:(t.dataTypes.unshift(u),r(u),!1)}),l}var s={},o=e===It;return r(t.dataTypes[0])||!s["*"]&&r("*")}function Z(e,t){var n,i,r=pe.ajaxSettings.flatOptions||{};for(n in t)void 0!==t[n]&&((r[n]?e:i||(i={}))[n]=t[n]);return i&&pe.extend(!0,e,i),e}function J(e,t,n){for(var i,r,s,o,a=e.contents,l=e.dataTypes;"*"===l[0];)l.shift(),void 0===i&&(i=e.mimeType||t.getResponseHeader("Content-Type"));if(i)for(r in a)if(a[r]&&a[r].test(i)){l.unshift(r);break}if(l[0]in n)s=l[0];else{for(r in n){if(!l[0]||e.converters[r+" "+l[0]]){s=r;break}o||(o=r)}s=s||o}if(s)return s!==l[0]&&l.unshift(s),n[s]}function ee(e,t,n,i){var r,s,o,a,l,u={},c=e.dataTypes.slice();if(c[1])for(o in e.converters)u[o.toLowerCase()]=e.converters[o];for(s=c.shift();s;)if(e.responseFields[s]&&(n[e.responseFields[s]]=t),!l&&i&&e.dataFilter&&(t=e.dataFilter(t,e.dataType)),l=s,s=c.shift())if("*"===s)s=l;else if("*"!==l&&l!==s){if(!(o=u[l+" "+s]||u["* "+s]))for(r in u)if(a=r.split(" "),a[1]===s&&(o=u[l+" "+a[0]]||u["* "+a[0]])){!0===o?o=u[r]:!0!==u[r]&&(s=a[0],c.unshift(a[1]));break}if(!0!==o)if(o&&e.throws)t=o(t);else try{t=o(t)}catch(e){return{state:"parsererror",error:o?e:"No conversion from "+l+" to "+s}}}return{state:"success",data:t}}var te=[],ne=e.document,ie=Object.getPrototypeOf,re=te.slice,se=te.concat,oe=te.push,ae=te.indexOf,le={},ue=le.toString,ce=le.hasOwnProperty,he=ce.toString,de=he.call(Object),fe={},pe=function(e,t){return new pe.fn.init(e,t)},ge=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,me=/^-ms-/,ve=/-([a-z])/g,ye=function(e,t){return t.toUpperCase()};pe.fn=pe.prototype={jquery:"3.2.1",constructor:pe,length:0,toArray:function(){return re.call(this)},get:function(e){return null==e?re.call(this):e<0?this[e+this.length]:this[e]},pushStack:function(e){var t=pe.merge(this.constructor(),e);return t.prevObject=this,t},each:function(e){return pe.each(this,e)},map:function(e){return this.pushStack(pe.map(this,function(t,n){return e.call(t,n,t)}))},slice:function(){return this.pushStack(re.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(e){var t=this.length,n=+e+(e<0?t:0);return this.pushStack(n>=0&&n<t?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:oe,sort:te.sort,splice:te.splice},pe.extend=pe.fn.extend=function(){var e,t,n,i,r,s,o=arguments[0]||{},a=1,l=arguments.length,u=!1;for("boolean"==typeof o&&(u=o,o=arguments[a]||{},a++),"object"==typeof o||pe.isFunction(o)||(o={}),a===l&&(o=this,a--);a<l;a++)if(null!=(e=arguments[a]))for(t in e)n=o[t],i=e[t],o!==i&&(u&&i&&(pe.isPlainObject(i)||(r=Array.isArray(i)))?(r?(r=!1,s=n&&Array.isArray(n)?n:[]):s=n&&pe.isPlainObject(n)?n:{},o[t]=pe.extend(u,s,i)):void 0!==i&&(o[t]=i));return o},pe.extend({expando:"jQuery"+("3.2.1"+Math.random()).replace(/\D/g,""),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isFunction:function(e){return"function"===pe.type(e)},isWindow:function(e){return null!=e&&e===e.window},isNumeric:function(e){var t=pe.type(e);return("number"===t||"string"===t)&&!isNaN(e-parseFloat(e))},isPlainObject:function(e){var t,n;return!(!e||"[object Object]"!==ue.call(e))&&(!(t=ie(e))||"function"==typeof(n=ce.call(t,"constructor")&&t.constructor)&&he.call(n)===de)},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},type:function(e){return null==e?e+"":"object"==typeof e||"function"==typeof e?le[ue.call(e)]||"object":typeof e},globalEval:function(e){n(e)},camelCase:function(e){return e.replace(me,"ms-").replace(ve,ye)},each:function(e,t){var n,r=0;if(i(e))for(n=e.length;r<n&&!1!==t.call(e[r],r,e[r]);r++);else for(r in e)if(!1===t.call(e[r],r,e[r]))break;return e},trim:function(e){return null==e?"":(e+"").replace(ge,"")},makeArray:function(e,t){var n=t||[];return null!=e&&(i(Object(e))?pe.merge(n,"string"==typeof e?[e]:e):oe.call(n,e)),n},inArray:function(e,t,n){return null==t?-1:ae.call(t,e,n)},merge:function(e,t){for(var n=+t.length,i=0,r=e.length;i<n;i++)e[r++]=t[i];return e.length=r,e},grep:function(e,t,n){for(var i=[],r=0,s=e.length,o=!n;r<s;r++)!t(e[r],r)!==o&&i.push(e[r]);return i},map:function(e,t,n){var r,s,o=0,a=[];if(i(e))for(r=e.length;o<r;o++)null!=(s=t(e[o],o,n))&&a.push(s);else for(o in e)null!=(s=t(e[o],o,n))&&a.push(s);return se.apply([],a)},guid:1,proxy:function(e,t){var n,i,r;if("string"==typeof t&&(n=e[t],t=e,e=n),pe.isFunction(e))return i=re.call(arguments,2),r=function(){return e.apply(t||this,i.concat(re.call(arguments)))},r.guid=e.guid=e.guid||pe.guid++,r},now:Date.now,support:fe}),"function"==typeof Symbol&&(pe.fn[Symbol.iterator]=te[Symbol.iterator]),pe.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(e,t){le["[object "+t+"]"]=t.toLowerCase()});var be=function(e){function t(e,t,n,i){var r,s,o,a,l,c,d,f=t&&t.ownerDocument,p=t?t.nodeType:9;if(n=n||[],"string"!=typeof e||!e||1!==p&&9!==p&&11!==p)return n;if(!i&&((t?t.ownerDocument||t:O)!==N&&A(t),t=t||N,L)){if(11!==p&&(l=ge.exec(e)))if(r=l[1]){if(9===p){if(!(o=t.getElementById(r)))return n;if(o.id===r)return n.push(o),n}else if(f&&(o=f.getElementById(r))&&P(t,o)&&o.id===r)return n.push(o),n}else{if(l[2])return Q.apply(n,t.getElementsByTagName(e)),n;if((r=l[3])&&_.getElementsByClassName&&t.getElementsByClassName)return Q.apply(n,t.getElementsByClassName(r)),n}if(_.qsa&&!W[e+" "]&&(!M||!M.test(e))){if(1!==p)f=t,d=e;else if("object"!==t.nodeName.toLowerCase()){for((a=t.getAttribute("id"))?a=a.replace(be,_e):t.setAttribute("id",a=I),c=C(e),s=c.length;s--;)c[s]="#"+a+" "+h(c[s]);d=c.join(","),f=me.test(e)&&u(t.parentNode)||t}if(d)try{return Q.apply(n,f.querySelectorAll(d)),n}catch(e){}finally{a===I&&t.removeAttribute("id")}}}return E(e.replace(se,"$1"),t,n,i)}function n(){function e(n,i){return t.push(n+" ")>x.cacheLength&&delete e[t.shift()],e[n+" "]=i}var t=[];return e}function i(e){return e[I]=!0,e}function r(e){var t=N.createElement("fieldset");try{return!!e(t)}catch(e){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function s(e,t){for(var n=e.split("|"),i=n.length;i--;)x.attrHandle[n[i]]=t}function o(e,t){var n=t&&e,i=n&&1===e.nodeType&&1===t.nodeType&&e.sourceIndex-t.sourceIndex;if(i)return i;if(n)for(;n=n.nextSibling;)if(n===t)return-1;return e?1:-1}function a(e){return function(t){return"form"in t?t.parentNode&&!1===t.disabled?"label"in t?"label"in t.parentNode?t.parentNode.disabled===e:t.disabled===e:t.isDisabled===e||t.isDisabled!==!e&&we(t)===e:t.disabled===e:"label"in t&&t.disabled===e}}function l(e){return i(function(t){return t=+t,i(function(n,i){for(var r,s=e([],n.length,t),o=s.length;o--;)n[r=s[o]]&&(n[r]=!(i[r]=n[r]))})})}function u(e){return e&&void 0!==e.getElementsByTagName&&e}function c(){}function h(e){for(var t=0,n=e.length,i="";t<n;t++)i+=e[t].value;return i}function d(e,t,n){var i=t.dir,r=t.next,s=r||i,o=n&&"parentNode"===s,a=F++;return t.first?function(t,n,r){for(;t=t[i];)if(1===t.nodeType||o)return e(t,n,r);return!1}:function(t,n,l){var u,c,h,d=[H,a];if(l){for(;t=t[i];)if((1===t.nodeType||o)&&e(t,n,l))return!0}else for(;t=t[i];)if(1===t.nodeType||o)if(h=t[I]||(t[I]={}),c=h[t.uniqueID]||(h[t.uniqueID]={}),r&&r===t.nodeName.toLowerCase())t=t[i]||t;else{if((u=c[s])&&u[0]===H&&u[1]===a)return d[2]=u[2];if(c[s]=d,d[2]=e(t,n,l))return!0}return!1}}function f(e){return e.length>1?function(t,n,i){for(var r=e.length;r--;)if(!e[r](t,n,i))return!1;return!0}:e[0]}function p(e,n,i){for(var r=0,s=n.length;r<s;r++)t(e,n[r],i);return i}function g(e,t,n,i,r){for(var s,o=[],a=0,l=e.length,u=null!=t;a<l;a++)(s=e[a])&&(n&&!n(s,i,r)||(o.push(s),u&&t.push(a)));return o}function m(e,t,n,r,s,o){return r&&!r[I]&&(r=m(r)),s&&!s[I]&&(s=m(s,o)),i(function(i,o,a,l){var u,c,h,d=[],f=[],m=o.length,v=i||p(t||"*",a.nodeType?[a]:a,[]),y=!e||!i&&t?v:g(v,d,e,a,l),b=n?s||(i?e:m||r)?[]:o:y;if(n&&n(y,b,a,l),r)for(u=g(b,f),r(u,[],a,l),c=u.length;c--;)(h=u[c])&&(b[f[c]]=!(y[f[c]]=h));if(i){if(s||e){if(s){for(u=[],c=b.length;c--;)(h=b[c])&&u.push(y[c]=h);s(null,b=[],u,l)}for(c=b.length;c--;)(h=b[c])&&(u=s?Z(i,h):d[c])>-1&&(i[u]=!(o[u]=h))}}else b=g(b===o?b.splice(m,b.length):b),s?s(null,o,b,l):Q.apply(o,b)})}function v(e){for(var t,n,i,r=e.length,s=x.relative[e[0].type],o=s||x.relative[" "],a=s?1:0,l=d(function(e){return e===t},o,!0),u=d(function(e){return Z(t,e)>-1},o,!0),c=[function(e,n,i){var r=!s&&(i||n!==j)||((t=n).nodeType?l(e,n,i):u(e,n,i));return t=null,r}];a<r;a++)if(n=x.relative[e[a].type])c=[d(f(c),n)];else{if(n=x.filter[e[a].type].apply(null,e[a].matches),n[I]){for(i=++a;i<r&&!x.relative[e[i].type];i++);return m(a>1&&f(c),a>1&&h(e.slice(0,a-1).concat({value:" "===e[a-2].type?"*":""})).replace(se,"$1"),n,a<i&&v(e.slice(a,i)),i<r&&v(e=e.slice(i)),i<r&&h(e))}c.push(n)}return f(c)}function y(e,n){var r=n.length>0,s=e.length>0,o=function(i,o,a,l,u){var c,h,d,f=0,p="0",m=i&&[],v=[],y=j,b=i||s&&x.find.TAG("*",u),_=H+=null==y?1:Math.random()||.1,w=b.length;for(u&&(j=o===N||o||u);p!==w&&null!=(c=b[p]);p++){if(s&&c){for(h=0,o||c.ownerDocument===N||(A(c),a=!L);d=e[h++];)if(d(c,o||N,a)){l.push(c);break}u&&(H=_)}r&&((c=!d&&c)&&f--,i&&m.push(c))}if(f+=p,r&&p!==f){for(h=0;d=n[h++];)d(m,v,o,a);if(i){if(f>0)for(;p--;)m[p]||v[p]||(v[p]=G.call(l));v=g(v)}Q.apply(l,v),u&&!i&&v.length>0&&f+n.length>1&&t.uniqueSort(l)}return u&&(H=_,j=y),m};return r?i(o):o}var b,_,x,w,k,C,T,E,j,S,$,A,N,D,L,M,q,R,P,I="sizzle"+1*new Date,O=e.document,H=0,F=0,B=n(),z=n(),W=n(),U=function(e,t){return e===t&&($=!0),0},V={}.hasOwnProperty,X=[],G=X.pop,K=X.push,Q=X.push,Y=X.slice,Z=function(e,t){for(var n=0,i=e.length;n<i;n++)if(e[n]===t)return n;return-1},J="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",ee="[\\x20\\t\\r\\n\\f]",te="(?:\\\\.|[\\w-]|[^\0-\\xa0])+",ne="\\["+ee+"*("+te+")(?:"+ee+"*([*^$|!~]?=)"+ee+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+te+"))|)"+ee+"*\\]",ie=":("+te+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+ne+")*)|.*)\\)|)",re=new RegExp(ee+"+","g"),se=new RegExp("^"+ee+"+|((?:^|[^\\\\])(?:\\\\.)*)"+ee+"+$","g"),oe=new RegExp("^"+ee+"*,"+ee+"*"),ae=new RegExp("^"+ee+"*([>+~]|"+ee+")"+ee+"*"),le=new RegExp("="+ee+"*([^\\]'\"]*?)"+ee+"*\\]","g"),ue=new RegExp(ie),ce=new RegExp("^"+te+"$"),he={ID:new RegExp("^#("+te+")"),CLASS:new RegExp("^\\.("+te+")"),TAG:new RegExp("^("+te+"|[*])"),ATTR:new RegExp("^"+ne),PSEUDO:new RegExp("^"+ie),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+ee+"*(even|odd|(([+-]|)(\\d*)n|)"+ee+"*(?:([+-]|)"+ee+"*(\\d+)|))"+ee+"*\\)|)","i"),bool:new RegExp("^(?:"+J+")$","i"),needsContext:new RegExp("^"+ee+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+ee+"*((?:-\\d)?\\d*)"+ee+"*\\)|)(?=[^-]|$)","i")},de=/^(?:input|select|textarea|button)$/i,fe=/^h\d$/i,pe=/^[^{]+\{\s*\[native \w/,ge=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,me=/[+~]/,ve=new RegExp("\\\\([\\da-f]{1,6}"+ee+"?|("+ee+")|.)","ig"),ye=function(e,t,n){var i="0x"+t-65536;return i!==i||n?t:i<0?String.fromCharCode(i+65536):String.fromCharCode(i>>10|55296,1023&i|56320)},be=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,_e=function(e,t){return t?"\0"===e?"�":e.slice(0,-1)+"\\"+e.charCodeAt(e.length-1).toString(16)+" ":"\\"+e},xe=function(){A()},we=d(function(e){return!0===e.disabled&&("form"in e||"label"in e)},{dir:"parentNode",next:"legend"});try{Q.apply(X=Y.call(O.childNodes),O.childNodes),X[O.childNodes.length].nodeType}catch(e){Q={apply:X.length?function(e,t){K.apply(e,Y.call(t))}:function(e,t){for(var n=e.length,i=0;e[n++]=t[i++];);e.length=n-1}}}_=t.support={},k=t.isXML=function(e){var t=e&&(e.ownerDocument||e).documentElement;return!!t&&"HTML"!==t.nodeName},A=t.setDocument=function(e){var t,n,i=e?e.ownerDocument||e:O;return i!==N&&9===i.nodeType&&i.documentElement?(N=i,D=N.documentElement,L=!k(N),O!==N&&(n=N.defaultView)&&n.top!==n&&(n.addEventListener?n.addEventListener("unload",xe,!1):n.attachEvent&&n.attachEvent("onunload",xe)),_.attributes=r(function(e){return e.className="i",!e.getAttribute("className")}),_.getElementsByTagName=r(function(e){return e.appendChild(N.createComment("")),!e.getElementsByTagName("*").length}),_.getElementsByClassName=pe.test(N.getElementsByClassName),_.getById=r(function(e){return D.appendChild(e).id=I,!N.getElementsByName||!N.getElementsByName(I).length}),_.getById?(x.filter.ID=function(e){var t=e.replace(ve,ye);return function(e){return e.getAttribute("id")===t}},x.find.ID=function(e,t){if(void 0!==t.getElementById&&L){var n=t.getElementById(e);return n?[n]:[]}}):(x.filter.ID=function(e){var t=e.replace(ve,ye);return function(e){var n=void 0!==e.getAttributeNode&&e.getAttributeNode("id");return n&&n.value===t}},x.find.ID=function(e,t){if(void 0!==t.getElementById&&L){var n,i,r,s=t.getElementById(e);if(s){if((n=s.getAttributeNode("id"))&&n.value===e)return[s];for(r=t.getElementsByName(e),i=0;s=r[i++];)if((n=s.getAttributeNode("id"))&&n.value===e)return[s]}return[]}}),x.find.TAG=_.getElementsByTagName?function(e,t){return void 0!==t.getElementsByTagName?t.getElementsByTagName(e):_.qsa?t.querySelectorAll(e):void 0}:function(e,t){var n,i=[],r=0,s=t.getElementsByTagName(e);if("*"===e){for(;n=s[r++];)1===n.nodeType&&i.push(n);return i}return s},x.find.CLASS=_.getElementsByClassName&&function(e,t){if(void 0!==t.getElementsByClassName&&L)return t.getElementsByClassName(e)},q=[],M=[],(_.qsa=pe.test(N.querySelectorAll))&&(r(function(e){D.appendChild(e).innerHTML="<a id='"+I+"'></a><select id='"+I+"-\r\\' msallowcapture=''><option selected=''></option></select>",e.querySelectorAll("[msallowcapture^='']").length&&M.push("[*^$]="+ee+"*(?:''|\"\")"),e.querySelectorAll("[selected]").length||M.push("\\["+ee+"*(?:value|"+J+")"),e.querySelectorAll("[id~="+I+"-]").length||M.push("~="),e.querySelectorAll(":checked").length||M.push(":checked"),e.querySelectorAll("a#"+I+"+*").length||M.push(".#.+[+~]")}),r(function(e){e.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var t=N.createElement("input");t.setAttribute("type","hidden"),e.appendChild(t).setAttribute("name","D"),e.querySelectorAll("[name=d]").length&&M.push("name"+ee+"*[*^$|!~]?="),2!==e.querySelectorAll(":enabled").length&&M.push(":enabled",":disabled"),D.appendChild(e).disabled=!0,2!==e.querySelectorAll(":disabled").length&&M.push(":enabled",":disabled"),e.querySelectorAll("*,:x"),M.push(",.*:")})),(_.matchesSelector=pe.test(R=D.matches||D.webkitMatchesSelector||D.mozMatchesSelector||D.oMatchesSelector||D.msMatchesSelector))&&r(function(e){_.disconnectedMatch=R.call(e,"*"),R.call(e,"[s!='']:x"),q.push("!=",ie)}),M=M.length&&new RegExp(M.join("|")),q=q.length&&new RegExp(q.join("|")),t=pe.test(D.compareDocumentPosition),P=t||pe.test(D.contains)?function(e,t){var n=9===e.nodeType?e.documentElement:e,i=t&&t.parentNode;return e===i||!(!i||1!==i.nodeType||!(n.contains?n.contains(i):e.compareDocumentPosition&&16&e.compareDocumentPosition(i)))}:function(e,t){if(t)for(;t=t.parentNode;)if(t===e)return!0;return!1},U=t?function(e,t){if(e===t)return $=!0,0;var n=!e.compareDocumentPosition-!t.compareDocumentPosition;return n||(n=(e.ownerDocument||e)===(t.ownerDocument||t)?e.compareDocumentPosition(t):1,1&n||!_.sortDetached&&t.compareDocumentPosition(e)===n?e===N||e.ownerDocument===O&&P(O,e)?-1:t===N||t.ownerDocument===O&&P(O,t)?1:S?Z(S,e)-Z(S,t):0:4&n?-1:1)}:function(e,t){if(e===t)return $=!0,0;var n,i=0,r=e.parentNode,s=t.parentNode,a=[e],l=[t];if(!r||!s)return e===N?-1:t===N?1:r?-1:s?1:S?Z(S,e)-Z(S,t):0;if(r===s)return o(e,t);for(n=e;n=n.parentNode;)a.unshift(n);for(n=t;n=n.parentNode;)l.unshift(n);for(;a[i]===l[i];)i++;return i?o(a[i],l[i]):a[i]===O?-1:l[i]===O?1:0},N):N},t.matches=function(e,n){return t(e,null,null,n)},t.matchesSelector=function(e,n){if((e.ownerDocument||e)!==N&&A(e),n=n.replace(le,"='$1']"),_.matchesSelector&&L&&!W[n+" "]&&(!q||!q.test(n))&&(!M||!M.test(n)))try{var i=R.call(e,n);if(i||_.disconnectedMatch||e.document&&11!==e.document.nodeType)return i}catch(e){}return t(n,N,null,[e]).length>0},t.contains=function(e,t){return(e.ownerDocument||e)!==N&&A(e),P(e,t)},t.attr=function(e,t){(e.ownerDocument||e)!==N&&A(e);var n=x.attrHandle[t.toLowerCase()],i=n&&V.call(x.attrHandle,t.toLowerCase())?n(e,t,!L):void 0;return void 0!==i?i:_.attributes||!L?e.getAttribute(t):(i=e.getAttributeNode(t))&&i.specified?i.value:null},t.escape=function(e){return(e+"").replace(be,_e)},t.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},t.uniqueSort=function(e){var t,n=[],i=0,r=0;if($=!_.detectDuplicates,S=!_.sortStable&&e.slice(0),e.sort(U),$){for(;t=e[r++];)t===e[r]&&(i=n.push(r));for(;i--;)e.splice(n[i],1)}return S=null,e},w=t.getText=function(e){var t,n="",i=0,r=e.nodeType;if(r){if(1===r||9===r||11===r){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)n+=w(e)}else if(3===r||4===r)return e.nodeValue}else for(;t=e[i++];)n+=w(t);return n},x=t.selectors={cacheLength:50,createPseudo:i,match:he,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(ve,ye),e[3]=(e[3]||e[4]||e[5]||"").replace(ve,ye),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||t.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&t.error(e[0]),e},PSEUDO:function(e){var t,n=!e[6]&&e[2];return he.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||"":n&&ue.test(n)&&(t=C(n,!0))&&(t=n.indexOf(")",n.length-t)-n.length)&&(e[0]=e[0].slice(0,t),e[2]=n.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(ve,ye).toLowerCase();return"*"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=B[e+" "];return t||(t=new RegExp("(^|"+ee+")"+e+"("+ee+"|$)"))&&B(e,function(e){return t.test("string"==typeof e.className&&e.className||void 0!==e.getAttribute&&e.getAttribute("class")||"")})},ATTR:function(e,n,i){return function(r){var s=t.attr(r,e);return null==s?"!="===n:!n||(s+="","="===n?s===i:"!="===n?s!==i:"^="===n?i&&0===s.indexOf(i):"*="===n?i&&s.indexOf(i)>-1:"$="===n?i&&s.slice(-i.length)===i:"~="===n?(" "+s.replace(re," ")+" ").indexOf(i)>-1:"|="===n&&(s===i||s.slice(0,i.length+1)===i+"-"))}},CHILD:function(e,t,n,i,r){var s="nth"!==e.slice(0,3),o="last"!==e.slice(-4),a="of-type"===t;return 1===i&&0===r?function(e){return!!e.parentNode}:function(t,n,l){var u,c,h,d,f,p,g=s!==o?"nextSibling":"previousSibling",m=t.parentNode,v=a&&t.nodeName.toLowerCase(),y=!l&&!a,b=!1;if(m){if(s){for(;g;){for(d=t;d=d[g];)if(a?d.nodeName.toLowerCase()===v:1===d.nodeType)return!1;p=g="only"===e&&!p&&"nextSibling"}return!0}if(p=[o?m.firstChild:m.lastChild],o&&y){for(d=m,h=d[I]||(d[I]={}),c=h[d.uniqueID]||(h[d.uniqueID]={}),u=c[e]||[],f=u[0]===H&&u[1],b=f&&u[2],d=f&&m.childNodes[f];d=++f&&d&&d[g]||(b=f=0)||p.pop();)if(1===d.nodeType&&++b&&d===t){c[e]=[H,f,b];break}}else if(y&&(d=t,h=d[I]||(d[I]={}),c=h[d.uniqueID]||(h[d.uniqueID]={}),u=c[e]||[],f=u[0]===H&&u[1],b=f),!1===b)for(;(d=++f&&d&&d[g]||(b=f=0)||p.pop())&&((a?d.nodeName.toLowerCase()!==v:1!==d.nodeType)||!++b||(y&&(h=d[I]||(d[I]={}),c=h[d.uniqueID]||(h[d.uniqueID]={}),c[e]=[H,b]),d!==t)););return(b-=r)===i||b%i==0&&b/i>=0}}},PSEUDO:function(e,n){var r,s=x.pseudos[e]||x.setFilters[e.toLowerCase()]||t.error("unsupported pseudo: "+e);return s[I]?s(n):s.length>1?(r=[e,e,"",n],x.setFilters.hasOwnProperty(e.toLowerCase())?i(function(e,t){for(var i,r=s(e,n),o=r.length;o--;)i=Z(e,r[o]),e[i]=!(t[i]=r[o])}):function(e){return s(e,0,r)}):s}},pseudos:{not:i(function(e){var t=[],n=[],r=T(e.replace(se,"$1"));return r[I]?i(function(e,t,n,i){for(var s,o=r(e,null,i,[]),a=e.length;a--;)(s=o[a])&&(e[a]=!(t[a]=s))}):function(e,i,s){return t[0]=e,r(t,null,s,n),t[0]=null,!n.pop()}}),has:i(function(e){return function(n){return t(e,n).length>0}}),contains:i(function(e){return e=e.replace(ve,ye),function(t){
return(t.textContent||t.innerText||w(t)).indexOf(e)>-1}}),lang:i(function(e){return ce.test(e||"")||t.error("unsupported lang: "+e),e=e.replace(ve,ye).toLowerCase(),function(t){var n;do{if(n=L?t.lang:t.getAttribute("xml:lang")||t.getAttribute("lang"))return(n=n.toLowerCase())===e||0===n.indexOf(e+"-")}while((t=t.parentNode)&&1===t.nodeType);return!1}}),target:function(t){var n=e.location&&e.location.hash;return n&&n.slice(1)===t.id},root:function(e){return e===D},focus:function(e){return e===N.activeElement&&(!N.hasFocus||N.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:a(!1),disabled:a(!0),checked:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&!!e.checked||"option"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,!0===e.selected},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!x.pseudos.empty(e)},header:function(e){return fe.test(e.nodeName)},input:function(e){return de.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&"button"===e.type||"button"===t},text:function(e){var t;return"input"===e.nodeName.toLowerCase()&&"text"===e.type&&(null==(t=e.getAttribute("type"))||"text"===t.toLowerCase())},first:l(function(){return[0]}),last:l(function(e,t){return[t-1]}),eq:l(function(e,t,n){return[n<0?n+t:n]}),even:l(function(e,t){for(var n=0;n<t;n+=2)e.push(n);return e}),odd:l(function(e,t){for(var n=1;n<t;n+=2)e.push(n);return e}),lt:l(function(e,t,n){for(var i=n<0?n+t:n;--i>=0;)e.push(i);return e}),gt:l(function(e,t,n){for(var i=n<0?n+t:n;++i<t;)e.push(i);return e})}},x.pseudos.nth=x.pseudos.eq;for(b in{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})x.pseudos[b]=function(e){return function(t){return"input"===t.nodeName.toLowerCase()&&t.type===e}}(b);for(b in{submit:!0,reset:!0})x.pseudos[b]=function(e){return function(t){var n=t.nodeName.toLowerCase();return("input"===n||"button"===n)&&t.type===e}}(b);return c.prototype=x.filters=x.pseudos,x.setFilters=new c,C=t.tokenize=function(e,n){var i,r,s,o,a,l,u,c=z[e+" "];if(c)return n?0:c.slice(0);for(a=e,l=[],u=x.preFilter;a;){i&&!(r=oe.exec(a))||(r&&(a=a.slice(r[0].length)||a),l.push(s=[])),i=!1,(r=ae.exec(a))&&(i=r.shift(),s.push({value:i,type:r[0].replace(se," ")}),a=a.slice(i.length));for(o in x.filter)!(r=he[o].exec(a))||u[o]&&!(r=u[o](r))||(i=r.shift(),s.push({value:i,type:o,matches:r}),a=a.slice(i.length));if(!i)break}return n?a.length:a?t.error(e):z(e,l).slice(0)},T=t.compile=function(e,t){var n,i=[],r=[],s=W[e+" "];if(!s){for(t||(t=C(e)),n=t.length;n--;)s=v(t[n]),s[I]?i.push(s):r.push(s);s=W(e,y(r,i)),s.selector=e}return s},E=t.select=function(e,t,n,i){var r,s,o,a,l,c="function"==typeof e&&e,d=!i&&C(e=c.selector||e);if(n=n||[],1===d.length){if(s=d[0]=d[0].slice(0),s.length>2&&"ID"===(o=s[0]).type&&9===t.nodeType&&L&&x.relative[s[1].type]){if(!(t=(x.find.ID(o.matches[0].replace(ve,ye),t)||[])[0]))return n;c&&(t=t.parentNode),e=e.slice(s.shift().value.length)}for(r=he.needsContext.test(e)?0:s.length;r--&&(o=s[r],!x.relative[a=o.type]);)if((l=x.find[a])&&(i=l(o.matches[0].replace(ve,ye),me.test(s[0].type)&&u(t.parentNode)||t))){if(s.splice(r,1),!(e=i.length&&h(s)))return Q.apply(n,i),n;break}}return(c||T(e,d))(i,t,!L,n,!t||me.test(e)&&u(t.parentNode)||t),n},_.sortStable=I.split("").sort(U).join("")===I,_.detectDuplicates=!!$,A(),_.sortDetached=r(function(e){return 1&e.compareDocumentPosition(N.createElement("fieldset"))}),r(function(e){return e.innerHTML="<a href='#'></a>","#"===e.firstChild.getAttribute("href")})||s("type|href|height|width",function(e,t,n){if(!n)return e.getAttribute(t,"type"===t.toLowerCase()?1:2)}),_.attributes&&r(function(e){return e.innerHTML="<input/>",e.firstChild.setAttribute("value",""),""===e.firstChild.getAttribute("value")})||s("value",function(e,t,n){if(!n&&"input"===e.nodeName.toLowerCase())return e.defaultValue}),r(function(e){return null==e.getAttribute("disabled")})||s(J,function(e,t,n){var i;if(!n)return!0===e[t]?t.toLowerCase():(i=e.getAttributeNode(t))&&i.specified?i.value:null}),t}(e);pe.find=be,pe.expr=be.selectors,pe.expr[":"]=pe.expr.pseudos,pe.uniqueSort=pe.unique=be.uniqueSort,pe.text=be.getText,pe.isXMLDoc=be.isXML,pe.contains=be.contains,pe.escapeSelector=be.escape;var _e=function(e,t,n){for(var i=[],r=void 0!==n;(e=e[t])&&9!==e.nodeType;)if(1===e.nodeType){if(r&&pe(e).is(n))break;i.push(e)}return i},xe=function(e,t){for(var n=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&n.push(e);return n},we=pe.expr.match.needsContext,ke=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i,Ce=/^.[^:#\[\.,]*$/;pe.filter=function(e,t,n){var i=t[0];return n&&(e=":not("+e+")"),1===t.length&&1===i.nodeType?pe.find.matchesSelector(i,e)?[i]:[]:pe.find.matches(e,pe.grep(t,function(e){return 1===e.nodeType}))},pe.fn.extend({find:function(e){var t,n,i=this.length,r=this;if("string"!=typeof e)return this.pushStack(pe(e).filter(function(){for(t=0;t<i;t++)if(pe.contains(r[t],this))return!0}));for(n=this.pushStack([]),t=0;t<i;t++)pe.find(e,r[t],n);return i>1?pe.uniqueSort(n):n},filter:function(e){return this.pushStack(s(this,e||[],!1))},not:function(e){return this.pushStack(s(this,e||[],!0))},is:function(e){return!!s(this,"string"==typeof e&&we.test(e)?pe(e):e||[],!1).length}});var Te,Ee=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;(pe.fn.init=function(e,t,n){var i,r;if(!e)return this;if(n=n||Te,"string"==typeof e){if(!(i="<"===e[0]&&">"===e[e.length-1]&&e.length>=3?[null,e,null]:Ee.exec(e))||!i[1]&&t)return!t||t.jquery?(t||n).find(e):this.constructor(t).find(e);if(i[1]){if(t=t instanceof pe?t[0]:t,pe.merge(this,pe.parseHTML(i[1],t&&t.nodeType?t.ownerDocument||t:ne,!0)),ke.test(i[1])&&pe.isPlainObject(t))for(i in t)pe.isFunction(this[i])?this[i](t[i]):this.attr(i,t[i]);return this}return r=ne.getElementById(i[2]),r&&(this[0]=r,this.length=1),this}return e.nodeType?(this[0]=e,this.length=1,this):pe.isFunction(e)?void 0!==n.ready?n.ready(e):e(pe):pe.makeArray(e,this)}).prototype=pe.fn,Te=pe(ne);var je=/^(?:parents|prev(?:Until|All))/,Se={children:!0,contents:!0,next:!0,prev:!0};pe.fn.extend({has:function(e){var t=pe(e,this),n=t.length;return this.filter(function(){for(var e=0;e<n;e++)if(pe.contains(this,t[e]))return!0})},closest:function(e,t){var n,i=0,r=this.length,s=[],o="string"!=typeof e&&pe(e);if(!we.test(e))for(;i<r;i++)for(n=this[i];n&&n!==t;n=n.parentNode)if(n.nodeType<11&&(o?o.index(n)>-1:1===n.nodeType&&pe.find.matchesSelector(n,e))){s.push(n);break}return this.pushStack(s.length>1?pe.uniqueSort(s):s)},index:function(e){return e?"string"==typeof e?ae.call(pe(e),this[0]):ae.call(this,e.jquery?e[0]:e):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){return this.pushStack(pe.uniqueSort(pe.merge(this.get(),pe(e,t))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),pe.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return _e(e,"parentNode")},parentsUntil:function(e,t,n){return _e(e,"parentNode",n)},next:function(e){return o(e,"nextSibling")},prev:function(e){return o(e,"previousSibling")},nextAll:function(e){return _e(e,"nextSibling")},prevAll:function(e){return _e(e,"previousSibling")},nextUntil:function(e,t,n){return _e(e,"nextSibling",n)},prevUntil:function(e,t,n){return _e(e,"previousSibling",n)},siblings:function(e){return xe((e.parentNode||{}).firstChild,e)},children:function(e){return xe(e.firstChild)},contents:function(e){return r(e,"iframe")?e.contentDocument:(r(e,"template")&&(e=e.content||e),pe.merge([],e.childNodes))}},function(e,t){pe.fn[e]=function(n,i){var r=pe.map(this,t,n);return"Until"!==e.slice(-5)&&(i=n),i&&"string"==typeof i&&(r=pe.filter(i,r)),this.length>1&&(Se[e]||pe.uniqueSort(r),je.test(e)&&r.reverse()),this.pushStack(r)}});var $e=/[^\x20\t\r\n\f]+/g;pe.Callbacks=function(e){e="string"==typeof e?a(e):pe.extend({},e);var t,n,i,r,s=[],o=[],l=-1,u=function(){for(r=r||e.once,i=t=!0;o.length;l=-1)for(n=o.shift();++l<s.length;)!1===s[l].apply(n[0],n[1])&&e.stopOnFalse&&(l=s.length,n=!1);e.memory||(n=!1),t=!1,r&&(s=n?[]:"")},c={add:function(){return s&&(n&&!t&&(l=s.length-1,o.push(n)),function t(n){pe.each(n,function(n,i){pe.isFunction(i)?e.unique&&c.has(i)||s.push(i):i&&i.length&&"string"!==pe.type(i)&&t(i)})}(arguments),n&&!t&&u()),this},remove:function(){return pe.each(arguments,function(e,t){for(var n;(n=pe.inArray(t,s,n))>-1;)s.splice(n,1),n<=l&&l--}),this},has:function(e){return e?pe.inArray(e,s)>-1:s.length>0},empty:function(){return s&&(s=[]),this},disable:function(){return r=o=[],s=n="",this},disabled:function(){return!s},lock:function(){return r=o=[],n||t||(s=n=""),this},locked:function(){return!!r},fireWith:function(e,n){return r||(n=n||[],n=[e,n.slice?n.slice():n],o.push(n),t||u()),this},fire:function(){return c.fireWith(this,arguments),this},fired:function(){return!!i}};return c},pe.extend({Deferred:function(t){var n=[["notify","progress",pe.Callbacks("memory"),pe.Callbacks("memory"),2],["resolve","done",pe.Callbacks("once memory"),pe.Callbacks("once memory"),0,"resolved"],["reject","fail",pe.Callbacks("once memory"),pe.Callbacks("once memory"),1,"rejected"]],i="pending",r={state:function(){return i},always:function(){return s.done(arguments).fail(arguments),this},catch:function(e){return r.then(null,e)},pipe:function(){var e=arguments;return pe.Deferred(function(t){pe.each(n,function(n,i){var r=pe.isFunction(e[i[4]])&&e[i[4]];s[i[1]](function(){var e=r&&r.apply(this,arguments);e&&pe.isFunction(e.promise)?e.promise().progress(t.notify).done(t.resolve).fail(t.reject):t[i[0]+"With"](this,r?[e]:arguments)})}),e=null}).promise()},then:function(t,i,r){function s(t,n,i,r){return function(){var a=this,c=arguments,h=function(){var e,h;if(!(t<o)){if((e=i.apply(a,c))===n.promise())throw new TypeError("Thenable self-resolution");h=e&&("object"==typeof e||"function"==typeof e)&&e.then,pe.isFunction(h)?r?h.call(e,s(o,n,l,r),s(o,n,u,r)):(o++,h.call(e,s(o,n,l,r),s(o,n,u,r),s(o,n,l,n.notifyWith))):(i!==l&&(a=void 0,c=[e]),(r||n.resolveWith)(a,c))}},d=r?h:function(){try{h()}catch(e){pe.Deferred.exceptionHook&&pe.Deferred.exceptionHook(e,d.stackTrace),t+1>=o&&(i!==u&&(a=void 0,c=[e]),n.rejectWith(a,c))}};t?d():(pe.Deferred.getStackHook&&(d.stackTrace=pe.Deferred.getStackHook()),e.setTimeout(d))}}var o=0;return pe.Deferred(function(e){n[0][3].add(s(0,e,pe.isFunction(r)?r:l,e.notifyWith)),n[1][3].add(s(0,e,pe.isFunction(t)?t:l)),n[2][3].add(s(0,e,pe.isFunction(i)?i:u))}).promise()},promise:function(e){return null!=e?pe.extend(e,r):r}},s={};return pe.each(n,function(e,t){var o=t[2],a=t[5];r[t[1]]=o.add,a&&o.add(function(){i=a},n[3-e][2].disable,n[0][2].lock),o.add(t[3].fire),s[t[0]]=function(){return s[t[0]+"With"](this===s?void 0:this,arguments),this},s[t[0]+"With"]=o.fireWith}),r.promise(s),t&&t.call(s,s),s},when:function(e){var t=arguments.length,n=t,i=Array(n),r=re.call(arguments),s=pe.Deferred(),o=function(e){return function(n){i[e]=this,r[e]=arguments.length>1?re.call(arguments):n,--t||s.resolveWith(i,r)}};if(t<=1&&(c(e,s.done(o(n)).resolve,s.reject,!t),"pending"===s.state()||pe.isFunction(r[n]&&r[n].then)))return s.then();for(;n--;)c(r[n],o(n),s.reject);return s.promise()}});var Ae=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;pe.Deferred.exceptionHook=function(t,n){e.console&&e.console.warn&&t&&Ae.test(t.name)&&e.console.warn("jQuery.Deferred exception: "+t.message,t.stack,n)},pe.readyException=function(t){e.setTimeout(function(){throw t})};var Ne=pe.Deferred();pe.fn.ready=function(e){return Ne.then(e).catch(function(e){pe.readyException(e)}),this},pe.extend({isReady:!1,readyWait:1,ready:function(e){(!0===e?--pe.readyWait:pe.isReady)||(pe.isReady=!0,!0!==e&&--pe.readyWait>0||Ne.resolveWith(ne,[pe]))}}),pe.ready.then=Ne.then,"complete"===ne.readyState||"loading"!==ne.readyState&&!ne.documentElement.doScroll?e.setTimeout(pe.ready):(ne.addEventListener("DOMContentLoaded",h),e.addEventListener("load",h));var De=function(e,t,n,i,r,s,o){var a=0,l=e.length,u=null==n;if("object"===pe.type(n)){r=!0;for(a in n)De(e,t,a,n[a],!0,s,o)}else if(void 0!==i&&(r=!0,pe.isFunction(i)||(o=!0),u&&(o?(t.call(e,i),t=null):(u=t,t=function(e,t,n){return u.call(pe(e),n)})),t))for(;a<l;a++)t(e[a],n,o?i:i.call(e[a],a,t(e[a],n)));return r?e:u?t.call(e):l?t(e[0],n):s},Le=function(e){return 1===e.nodeType||9===e.nodeType||!+e.nodeType};d.uid=1,d.prototype={cache:function(e){var t=e[this.expando];return t||(t={},Le(e)&&(e.nodeType?e[this.expando]=t:Object.defineProperty(e,this.expando,{value:t,configurable:!0}))),t},set:function(e,t,n){var i,r=this.cache(e);if("string"==typeof t)r[pe.camelCase(t)]=n;else for(i in t)r[pe.camelCase(i)]=t[i];return r},get:function(e,t){return void 0===t?this.cache(e):e[this.expando]&&e[this.expando][pe.camelCase(t)]},access:function(e,t,n){return void 0===t||t&&"string"==typeof t&&void 0===n?this.get(e,t):(this.set(e,t,n),void 0!==n?n:t)},remove:function(e,t){var n,i=e[this.expando];if(void 0!==i){if(void 0!==t){Array.isArray(t)?t=t.map(pe.camelCase):(t=pe.camelCase(t),t=t in i?[t]:t.match($e)||[]),n=t.length;for(;n--;)delete i[t[n]]}(void 0===t||pe.isEmptyObject(i))&&(e.nodeType?e[this.expando]=void 0:delete e[this.expando])}},hasData:function(e){var t=e[this.expando];return void 0!==t&&!pe.isEmptyObject(t)}};var Me=new d,qe=new d,Re=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,Pe=/[A-Z]/g;pe.extend({hasData:function(e){return qe.hasData(e)||Me.hasData(e)},data:function(e,t,n){return qe.access(e,t,n)},removeData:function(e,t){qe.remove(e,t)},_data:function(e,t,n){return Me.access(e,t,n)},_removeData:function(e,t){Me.remove(e,t)}}),pe.fn.extend({data:function(e,t){var n,i,r,s=this[0],o=s&&s.attributes;if(void 0===e){if(this.length&&(r=qe.get(s),1===s.nodeType&&!Me.get(s,"hasDataAttrs"))){for(n=o.length;n--;)o[n]&&(i=o[n].name,0===i.indexOf("data-")&&(i=pe.camelCase(i.slice(5)),p(s,i,r[i])));Me.set(s,"hasDataAttrs",!0)}return r}return"object"==typeof e?this.each(function(){qe.set(this,e)}):De(this,function(t){var n;if(s&&void 0===t){if(void 0!==(n=qe.get(s,e)))return n;if(void 0!==(n=p(s,e)))return n}else this.each(function(){qe.set(this,e,t)})},null,t,arguments.length>1,null,!0)},removeData:function(e){return this.each(function(){qe.remove(this,e)})}}),pe.extend({queue:function(e,t,n){var i;if(e)return t=(t||"fx")+"queue",i=Me.get(e,t),n&&(!i||Array.isArray(n)?i=Me.access(e,t,pe.makeArray(n)):i.push(n)),i||[]},dequeue:function(e,t){t=t||"fx";var n=pe.queue(e,t),i=n.length,r=n.shift(),s=pe._queueHooks(e,t),o=function(){pe.dequeue(e,t)};"inprogress"===r&&(r=n.shift(),i--),r&&("fx"===t&&n.unshift("inprogress"),delete s.stop,r.call(e,o,s)),!i&&s&&s.empty.fire()},_queueHooks:function(e,t){var n=t+"queueHooks";return Me.get(e,n)||Me.access(e,n,{empty:pe.Callbacks("once memory").add(function(){Me.remove(e,[t+"queue",n])})})}}),pe.fn.extend({queue:function(e,t){var n=2;return"string"!=typeof e&&(t=e,e="fx",n--),arguments.length<n?pe.queue(this[0],e):void 0===t?this:this.each(function(){var n=pe.queue(this,e,t);pe._queueHooks(this,e),"fx"===e&&"inprogress"!==n[0]&&pe.dequeue(this,e)})},dequeue:function(e){return this.each(function(){pe.dequeue(this,e)})},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,t){var n,i=1,r=pe.Deferred(),s=this,o=this.length,a=function(){--i||r.resolveWith(s,[s])};for("string"!=typeof e&&(t=e,e=void 0),e=e||"fx";o--;)(n=Me.get(s[o],e+"queueHooks"))&&n.empty&&(i++,n.empty.add(a));return a(),r.promise(t)}});var Ie=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,Oe=new RegExp("^(?:([+-])=|)("+Ie+")([a-z%]*)$","i"),He=["Top","Right","Bottom","Left"],Fe=function(e,t){return e=t||e,"none"===e.style.display||""===e.style.display&&pe.contains(e.ownerDocument,e)&&"none"===pe.css(e,"display")},Be=function(e,t,n,i){var r,s,o={};for(s in t)o[s]=e.style[s],e.style[s]=t[s];r=n.apply(e,i||[]);for(s in t)e.style[s]=o[s];return r},ze={};pe.fn.extend({show:function(){return v(this,!0)},hide:function(){return v(this)},toggle:function(e){return"boolean"==typeof e?e?this.show():this.hide():this.each(function(){Fe(this)?pe(this).show():pe(this).hide()})}});var We=/^(?:checkbox|radio)$/i,Ue=/<([a-z][^\/\0>\x20\t\r\n\f]+)/i,Ve=/^$|\/(?:java|ecma)script/i,Xe={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};Xe.optgroup=Xe.option,Xe.tbody=Xe.tfoot=Xe.colgroup=Xe.caption=Xe.thead,Xe.th=Xe.td;var Ge=/<|&#?\w+;/;!function(){var e=ne.createDocumentFragment(),t=e.appendChild(ne.createElement("div")),n=ne.createElement("input");n.setAttribute("type","radio"),n.setAttribute("checked","checked"),n.setAttribute("name","t"),t.appendChild(n),fe.checkClone=t.cloneNode(!0).cloneNode(!0).lastChild.checked,t.innerHTML="<textarea>x</textarea>",fe.noCloneChecked=!!t.cloneNode(!0).lastChild.defaultValue}();var Ke=ne.documentElement,Qe=/^key/,Ye=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,Ze=/^([^.]*)(?:\.(.+)|)/;pe.event={global:{},add:function(e,t,n,i,r){var s,o,a,l,u,c,h,d,f,p,g,m=Me.get(e);if(m)for(n.handler&&(s=n,n=s.handler,r=s.selector),r&&pe.find.matchesSelector(Ke,r),n.guid||(n.guid=pe.guid++),(l=m.events)||(l=m.events={}),(o=m.handle)||(o=m.handle=function(t){return void 0!==pe&&pe.event.triggered!==t.type?pe.event.dispatch.apply(e,arguments):void 0}),t=(t||"").match($e)||[""],u=t.length;u--;)a=Ze.exec(t[u])||[],f=g=a[1],p=(a[2]||"").split(".").sort(),f&&(h=pe.event.special[f]||{},f=(r?h.delegateType:h.bindType)||f,h=pe.event.special[f]||{},c=pe.extend({type:f,origType:g,data:i,handler:n,guid:n.guid,selector:r,needsContext:r&&pe.expr.match.needsContext.test(r),namespace:p.join(".")},s),(d=l[f])||(d=l[f]=[],d.delegateCount=0,h.setup&&!1!==h.setup.call(e,i,p,o)||e.addEventListener&&e.addEventListener(f,o)),h.add&&(h.add.call(e,c),c.handler.guid||(c.handler.guid=n.guid)),r?d.splice(d.delegateCount++,0,c):d.push(c),pe.event.global[f]=!0)},remove:function(e,t,n,i,r){var s,o,a,l,u,c,h,d,f,p,g,m=Me.hasData(e)&&Me.get(e);if(m&&(l=m.events)){for(t=(t||"").match($e)||[""],u=t.length;u--;)if(a=Ze.exec(t[u])||[],f=g=a[1],p=(a[2]||"").split(".").sort(),f){for(h=pe.event.special[f]||{},f=(i?h.delegateType:h.bindType)||f,d=l[f]||[],a=a[2]&&new RegExp("(^|\\.)"+p.join("\\.(?:.*\\.|)")+"(\\.|$)"),o=s=d.length;s--;)c=d[s],!r&&g!==c.origType||n&&n.guid!==c.guid||a&&!a.test(c.namespace)||i&&i!==c.selector&&("**"!==i||!c.selector)||(d.splice(s,1),c.selector&&d.delegateCount--,h.remove&&h.remove.call(e,c));o&&!d.length&&(h.teardown&&!1!==h.teardown.call(e,p,m.handle)||pe.removeEvent(e,f,m.handle),delete l[f])}else for(f in l)pe.event.remove(e,f+t[u],n,i,!0);pe.isEmptyObject(l)&&Me.remove(e,"handle events")}},dispatch:function(e){var t,n,i,r,s,o,a=pe.event.fix(e),l=new Array(arguments.length),u=(Me.get(this,"events")||{})[a.type]||[],c=pe.event.special[a.type]||{};for(l[0]=a,t=1;t<arguments.length;t++)l[t]=arguments[t];if(a.delegateTarget=this,!c.preDispatch||!1!==c.preDispatch.call(this,a)){for(o=pe.event.handlers.call(this,a,u),t=0;(r=o[t++])&&!a.isPropagationStopped();)for(a.currentTarget=r.elem,n=0;(s=r.handlers[n++])&&!a.isImmediatePropagationStopped();)a.rnamespace&&!a.rnamespace.test(s.namespace)||(a.handleObj=s,a.data=s.data,void 0!==(i=((pe.event.special[s.origType]||{}).handle||s.handler).apply(r.elem,l))&&!1===(a.result=i)&&(a.preventDefault(),a.stopPropagation()));return c.postDispatch&&c.postDispatch.call(this,a),a.result}},handlers:function(e,t){var n,i,r,s,o,a=[],l=t.delegateCount,u=e.target;if(l&&u.nodeType&&!("click"===e.type&&e.button>=1))for(;u!==this;u=u.parentNode||this)if(1===u.nodeType&&("click"!==e.type||!0!==u.disabled)){for(s=[],o={},n=0;n<l;n++)i=t[n],r=i.selector+" ",void 0===o[r]&&(o[r]=i.needsContext?pe(r,this).index(u)>-1:pe.find(r,this,null,[u]).length),o[r]&&s.push(i);s.length&&a.push({elem:u,handlers:s})}return u=this,l<t.length&&a.push({elem:u,handlers:t.slice(l)}),a},addProp:function(e,t){Object.defineProperty(pe.Event.prototype,e,{enumerable:!0,configurable:!0,get:pe.isFunction(t)?function(){if(this.originalEvent)return t(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[e]},set:function(t){Object.defineProperty(this,e,{enumerable:!0,configurable:!0,writable:!0,value:t})}})},fix:function(e){return e[pe.expando]?e:new pe.Event(e)},special:{load:{noBubble:!0},focus:{trigger:function(){if(this!==k()&&this.focus)return this.focus(),!1},delegateType:"focusin"},blur:{trigger:function(){if(this===k()&&this.blur)return this.blur(),!1},delegateType:"focusout"},click:{trigger:function(){if("checkbox"===this.type&&this.click&&r(this,"input"))return this.click(),!1},_default:function(e){return r(e.target,"a")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}}},pe.removeEvent=function(e,t,n){e.removeEventListener&&e.removeEventListener(t,n)},pe.Event=function(e,t){if(!(this instanceof pe.Event))return new pe.Event(e,t);e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&!1===e.returnValue?x:w,this.target=e.target&&3===e.target.nodeType?e.target.parentNode:e.target,this.currentTarget=e.currentTarget,this.relatedTarget=e.relatedTarget):this.type=e,t&&pe.extend(this,t),this.timeStamp=e&&e.timeStamp||pe.now(),this[pe.expando]=!0},pe.Event.prototype={constructor:pe.Event,isDefaultPrevented:w,isPropagationStopped:w,isImmediatePropagationStopped:w,isSimulated:!1,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=x,e&&!this.isSimulated&&e.preventDefault()},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=x,e&&!this.isSimulated&&e.stopPropagation()},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=x,e&&!this.isSimulated&&e.stopImmediatePropagation(),this.stopPropagation()}},pe.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:function(e){var t=e.button;return null==e.which&&Qe.test(e.type)?null!=e.charCode?e.charCode:e.keyCode:!e.which&&void 0!==t&&Ye.test(e.type)?1&t?1:2&t?3:4&t?2:0:e.which}},pe.event.addProp),pe.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(e,t){pe.event.special[e]={delegateType:t,bindType:t,handle:function(e){var n,i=this,r=e.relatedTarget,s=e.handleObj;return r&&(r===i||pe.contains(i,r))||(e.type=s.origType,n=s.handler.apply(this,arguments),e.type=t),n}}}),pe.fn.extend({on:function(e,t,n,i){return C(this,e,t,n,i)},one:function(e,t,n,i){return C(this,e,t,n,i,1)},off:function(e,t,n){var i,r;if(e&&e.preventDefault&&e.handleObj)return i=e.handleObj,pe(e.delegateTarget).off(i.namespace?i.origType+"."+i.namespace:i.origType,i.selector,i.handler),this;if("object"==typeof e){for(r in e)this.off(r,t,e[r]);return this}return!1!==t&&"function"!=typeof t||(n=t,t=void 0),!1===n&&(n=w),this.each(function(){pe.event.remove(this,e,n,t)})}});var Je=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,et=/<script|<style|<link/i,tt=/checked\s*(?:[^=]|=\s*.checked.)/i,nt=/^true\/(.*)/,it=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;pe.extend({htmlPrefilter:function(e){return e.replace(Je,"<$1></$2>")},clone:function(e,t,n){var i,r,s,o,a=e.cloneNode(!0),l=pe.contains(e.ownerDocument,e);if(!(fe.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||pe.isXMLDoc(e)))for(o=y(a),s=y(e),i=0,r=s.length;i<r;i++)$(s[i],o[i]);if(t)if(n)for(s=s||y(e),o=o||y(a),i=0,r=s.length;i<r;i++)S(s[i],o[i]);else S(e,a);return o=y(a,"script"),o.length>0&&b(o,!l&&y(e,"script")),a},cleanData:function(e){for(var t,n,i,r=pe.event.special,s=0;void 0!==(n=e[s]);s++)if(Le(n)){if(t=n[Me.expando]){if(t.events)for(i in t.events)r[i]?pe.event.remove(n,i):pe.removeEvent(n,i,t.handle);n[Me.expando]=void 0}n[qe.expando]&&(n[qe.expando]=void 0)}}}),pe.fn.extend({detach:function(e){return N(this,e,!0)},remove:function(e){return N(this,e)},text:function(e){return De(this,function(e){return void 0===e?pe.text(this):this.empty().each(function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=e)})},null,e,arguments.length)},append:function(){return A(this,arguments,function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){T(this,e).appendChild(e)}})},prepend:function(){return A(this,arguments,function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=T(this,e);t.insertBefore(e,t.firstChild)}})},before:function(){return A(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this)})},after:function(){return A(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)})},empty:function(){for(var e,t=0;null!=(e=this[t]);t++)1===e.nodeType&&(pe.cleanData(y(e,!1)),e.textContent="");return this},clone:function(e,t){return e=null!=e&&e,t=null==t?e:t,this.map(function(){return pe.clone(this,e,t)})},html:function(e){return De(this,function(e){var t=this[0]||{},n=0,i=this.length;if(void 0===e&&1===t.nodeType)return t.innerHTML;if("string"==typeof e&&!et.test(e)&&!Xe[(Ue.exec(e)||["",""])[1].toLowerCase()]){e=pe.htmlPrefilter(e);try{for(;n<i;n++)t=this[n]||{},1===t.nodeType&&(pe.cleanData(y(t,!1)),t.innerHTML=e);t=0}catch(e){}}t&&this.empty().append(e)},null,e,arguments.length)},replaceWith:function(){var e=[];return A(this,arguments,function(t){var n=this.parentNode;pe.inArray(this,e)<0&&(pe.cleanData(y(this)),n&&n.replaceChild(t,this))},e)}}),pe.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(e,t){pe.fn[e]=function(e){for(var n,i=[],r=pe(e),s=r.length-1,o=0;o<=s;o++)n=o===s?this:this.clone(!0),pe(r[o])[t](n),oe.apply(i,n.get());return this.pushStack(i)}});var rt=/^margin/,st=new RegExp("^("+Ie+")(?!px)[a-z%]+$","i"),ot=function(t){var n=t.ownerDocument.defaultView;return n&&n.opener||(n=e),n.getComputedStyle(t)};!function(){function t(){if(a){a.style.cssText="box-sizing:border-box;position:relative;display:block;margin:auto;border:1px;padding:1px;top:1%;width:50%",a.innerHTML="",Ke.appendChild(o);var t=e.getComputedStyle(a);n="1%"!==t.top,s="2px"===t.marginLeft,i="4px"===t.width,a.style.marginRight="50%",r="4px"===t.marginRight,Ke.removeChild(o),a=null}}var n,i,r,s,o=ne.createElement("div"),a=ne.createElement("div");a.style&&(a.style.backgroundClip="content-box",a.cloneNode(!0).style.backgroundClip="",fe.clearCloneStyle="content-box"===a.style.backgroundClip,o.style.cssText="border:0;width:8px;height:0;top:0;left:-9999px;padding:0;margin-top:1px;position:absolute",o.appendChild(a),pe.extend(fe,{pixelPosition:function(){return t(),n},boxSizingReliable:function(){return t(),i},pixelMarginRight:function(){return t(),r},reliableMarginLeft:function(){return t(),s}}))}();var at=/^(none|table(?!-c[ea]).+)/,lt=/^--/,ut={position:"absolute",visibility:"hidden",display:"block"},ct={letterSpacing:"0",fontWeight:"400"},ht=["Webkit","Moz","ms"],dt=ne.createElement("div").style;pe.extend({cssHooks:{opacity:{get:function(e,t){if(t){var n=D(e,"opacity");return""===n?"1":n}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{float:"cssFloat"},style:function(e,t,n,i){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var r,s,o,a=pe.camelCase(t),l=lt.test(t),u=e.style;if(l||(t=q(a)),o=pe.cssHooks[t]||pe.cssHooks[a],void 0===n)return o&&"get"in o&&void 0!==(r=o.get(e,!1,i))?r:u[t];s=typeof n,"string"===s&&(r=Oe.exec(n))&&r[1]&&(n=g(e,t,r),s="number"),null!=n&&n===n&&("number"===s&&(n+=r&&r[3]||(pe.cssNumber[a]?"":"px")),fe.clearCloneStyle||""!==n||0!==t.indexOf("background")||(u[t]="inherit"),o&&"set"in o&&void 0===(n=o.set(e,n,i))||(l?u.setProperty(t,n):u[t]=n))}},css:function(e,t,n,i){var r,s,o,a=pe.camelCase(t);return lt.test(t)||(t=q(a)),o=pe.cssHooks[t]||pe.cssHooks[a],o&&"get"in o&&(r=o.get(e,!0,n)),void 0===r&&(r=D(e,t,i)),"normal"===r&&t in ct&&(r=ct[t]),""===n||n?(s=parseFloat(r),!0===n||isFinite(s)?s||0:r):r}}),pe.each(["height","width"],function(e,t){pe.cssHooks[t]={get:function(e,n,i){if(n)return!at.test(pe.css(e,"display"))||e.getClientRects().length&&e.getBoundingClientRect().width?I(e,t,i):Be(e,ut,function(){return I(e,t,i)})},set:function(e,n,i){var r,s=i&&ot(e),o=i&&P(e,t,i,"border-box"===pe.css(e,"boxSizing",!1,s),s);return o&&(r=Oe.exec(n))&&"px"!==(r[3]||"px")&&(e.style[t]=n,n=pe.css(e,t)),R(e,n,o)}}}),pe.cssHooks.marginLeft=L(fe.reliableMarginLeft,function(e,t){if(t)return(parseFloat(D(e,"marginLeft"))||e.getBoundingClientRect().left-Be(e,{marginLeft:0},function(){return e.getBoundingClientRect().left}))+"px"}),pe.each({margin:"",padding:"",border:"Width"},function(e,t){pe.cssHooks[e+t]={expand:function(n){for(var i=0,r={},s="string"==typeof n?n.split(" "):[n];i<4;i++)r[e+He[i]+t]=s[i]||s[i-2]||s[0];return r}},rt.test(e)||(pe.cssHooks[e+t].set=R)}),pe.fn.extend({css:function(e,t){return De(this,function(e,t,n){var i,r,s={},o=0;if(Array.isArray(t)){for(i=ot(e),r=t.length;o<r;o++)s[t[o]]=pe.css(e,t[o],!1,i);return s}return void 0!==n?pe.style(e,t,n):pe.css(e,t)},e,t,arguments.length>1)}}),pe.Tween=O,O.prototype={constructor:O,init:function(e,t,n,i,r,s){this.elem=e,this.prop=n,this.easing=r||pe.easing._default,this.options=t,this.start=this.now=this.cur(),this.end=i,this.unit=s||(pe.cssNumber[n]?"":"px")},cur:function(){var e=O.propHooks[this.prop];return e&&e.get?e.get(this):O.propHooks._default.get(this)},run:function(e){var t,n=O.propHooks[this.prop];return this.options.duration?this.pos=t=pe.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):this.pos=t=e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):O.propHooks._default.set(this),this}},O.prototype.init.prototype=O.prototype,O.propHooks={_default:{get:function(e){var t;return 1!==e.elem.nodeType||null!=e.elem[e.prop]&&null==e.elem.style[e.prop]?e.elem[e.prop]:(t=pe.css(e.elem,e.prop,""),t&&"auto"!==t?t:0)},set:function(e){pe.fx.step[e.prop]?pe.fx.step[e.prop](e):1!==e.elem.nodeType||null==e.elem.style[pe.cssProps[e.prop]]&&!pe.cssHooks[e.prop]?e.elem[e.prop]=e.now:pe.style(e.elem,e.prop,e.now+e.unit)}}},O.propHooks.scrollTop=O.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},pe.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2},_default:"swing"},pe.fx=O.prototype.init,pe.fx.step={};var ft,pt,gt=/^(?:toggle|show|hide)$/,mt=/queueHooks$/;pe.Animation=pe.extend(V,{tweeners:{"*":[function(e,t){var n=this.createTween(e,t);return g(n.elem,e,Oe.exec(t),n),n}]},tweener:function(e,t){pe.isFunction(e)?(t=e,e=["*"]):e=e.match($e);for(var n,i=0,r=e.length;i<r;i++)n=e[i],V.tweeners[n]=V.tweeners[n]||[],V.tweeners[n].unshift(t)},prefilters:[W],prefilter:function(e,t){t?V.prefilters.unshift(e):V.prefilters.push(e)}}),pe.speed=function(e,t,n){var i=e&&"object"==typeof e?pe.extend({},e):{complete:n||!n&&t||pe.isFunction(e)&&e,duration:e,easing:n&&t||t&&!pe.isFunction(t)&&t};return pe.fx.off?i.duration=0:"number"!=typeof i.duration&&(i.duration in pe.fx.speeds?i.duration=pe.fx.speeds[i.duration]:i.duration=pe.fx.speeds._default),null!=i.queue&&!0!==i.queue||(i.queue="fx"),i.old=i.complete,i.complete=function(){pe.isFunction(i.old)&&i.old.call(this),i.queue&&pe.dequeue(this,i.queue)},i},pe.fn.extend({fadeTo:function(e,t,n,i){
return this.filter(Fe).css("opacity",0).show().end().animate({opacity:t},e,n,i)},animate:function(e,t,n,i){var r=pe.isEmptyObject(e),s=pe.speed(t,n,i),o=function(){var t=V(this,pe.extend({},e),s);(r||Me.get(this,"finish"))&&t.stop(!0)};return o.finish=o,r||!1===s.queue?this.each(o):this.queue(s.queue,o)},stop:function(e,t,n){var i=function(e){var t=e.stop;delete e.stop,t(n)};return"string"!=typeof e&&(n=t,t=e,e=void 0),t&&!1!==e&&this.queue(e||"fx",[]),this.each(function(){var t=!0,r=null!=e&&e+"queueHooks",s=pe.timers,o=Me.get(this);if(r)o[r]&&o[r].stop&&i(o[r]);else for(r in o)o[r]&&o[r].stop&&mt.test(r)&&i(o[r]);for(r=s.length;r--;)s[r].elem!==this||null!=e&&s[r].queue!==e||(s[r].anim.stop(n),t=!1,s.splice(r,1));!t&&n||pe.dequeue(this,e)})},finish:function(e){return!1!==e&&(e=e||"fx"),this.each(function(){var t,n=Me.get(this),i=n[e+"queue"],r=n[e+"queueHooks"],s=pe.timers,o=i?i.length:0;for(n.finish=!0,pe.queue(this,e,[]),r&&r.stop&&r.stop.call(this,!0),t=s.length;t--;)s[t].elem===this&&s[t].queue===e&&(s[t].anim.stop(!0),s.splice(t,1));for(t=0;t<o;t++)i[t]&&i[t].finish&&i[t].finish.call(this);delete n.finish})}}),pe.each(["toggle","show","hide"],function(e,t){var n=pe.fn[t];pe.fn[t]=function(e,i,r){return null==e||"boolean"==typeof e?n.apply(this,arguments):this.animate(B(t,!0),e,i,r)}}),pe.each({slideDown:B("show"),slideUp:B("hide"),slideToggle:B("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(e,t){pe.fn[e]=function(e,n,i){return this.animate(t,e,n,i)}}),pe.timers=[],pe.fx.tick=function(){var e,t=0,n=pe.timers;for(ft=pe.now();t<n.length;t++)(e=n[t])()||n[t]!==e||n.splice(t--,1);n.length||pe.fx.stop(),ft=void 0},pe.fx.timer=function(e){pe.timers.push(e),pe.fx.start()},pe.fx.interval=13,pe.fx.start=function(){pt||(pt=!0,H())},pe.fx.stop=function(){pt=null},pe.fx.speeds={slow:600,fast:200,_default:400},pe.fn.delay=function(t,n){return t=pe.fx?pe.fx.speeds[t]||t:t,n=n||"fx",this.queue(n,function(n,i){var r=e.setTimeout(n,t);i.stop=function(){e.clearTimeout(r)}})},function(){var e=ne.createElement("input"),t=ne.createElement("select"),n=t.appendChild(ne.createElement("option"));e.type="checkbox",fe.checkOn=""!==e.value,fe.optSelected=n.selected,e=ne.createElement("input"),e.value="t",e.type="radio",fe.radioValue="t"===e.value}();var vt,yt=pe.expr.attrHandle;pe.fn.extend({attr:function(e,t){return De(this,pe.attr,e,t,arguments.length>1)},removeAttr:function(e){return this.each(function(){pe.removeAttr(this,e)})}}),pe.extend({attr:function(e,t,n){var i,r,s=e.nodeType;if(3!==s&&8!==s&&2!==s)return void 0===e.getAttribute?pe.prop(e,t,n):(1===s&&pe.isXMLDoc(e)||(r=pe.attrHooks[t.toLowerCase()]||(pe.expr.match.bool.test(t)?vt:void 0)),void 0!==n?null===n?void pe.removeAttr(e,t):r&&"set"in r&&void 0!==(i=r.set(e,n,t))?i:(e.setAttribute(t,n+""),n):r&&"get"in r&&null!==(i=r.get(e,t))?i:(i=pe.find.attr(e,t),null==i?void 0:i))},attrHooks:{type:{set:function(e,t){if(!fe.radioValue&&"radio"===t&&r(e,"input")){var n=e.value;return e.setAttribute("type",t),n&&(e.value=n),t}}}},removeAttr:function(e,t){var n,i=0,r=t&&t.match($e);if(r&&1===e.nodeType)for(;n=r[i++];)e.removeAttribute(n)}}),vt={set:function(e,t,n){return!1===t?pe.removeAttr(e,n):e.setAttribute(n,n),n}},pe.each(pe.expr.match.bool.source.match(/\w+/g),function(e,t){var n=yt[t]||pe.find.attr;yt[t]=function(e,t,i){var r,s,o=t.toLowerCase();return i||(s=yt[o],yt[o]=r,r=null!=n(e,t,i)?o:null,yt[o]=s),r}});var bt=/^(?:input|select|textarea|button)$/i,_t=/^(?:a|area)$/i;pe.fn.extend({prop:function(e,t){return De(this,pe.prop,e,t,arguments.length>1)},removeProp:function(e){return this.each(function(){delete this[pe.propFix[e]||e]})}}),pe.extend({prop:function(e,t,n){var i,r,s=e.nodeType;if(3!==s&&8!==s&&2!==s)return 1===s&&pe.isXMLDoc(e)||(t=pe.propFix[t]||t,r=pe.propHooks[t]),void 0!==n?r&&"set"in r&&void 0!==(i=r.set(e,n,t))?i:e[t]=n:r&&"get"in r&&null!==(i=r.get(e,t))?i:e[t]},propHooks:{tabIndex:{get:function(e){var t=pe.find.attr(e,"tabindex");return t?parseInt(t,10):bt.test(e.nodeName)||_t.test(e.nodeName)&&e.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),fe.optSelected||(pe.propHooks.selected={get:function(e){var t=e.parentNode;return t&&t.parentNode&&t.parentNode.selectedIndex,null},set:function(e){var t=e.parentNode;t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex)}}),pe.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){pe.propFix[this.toLowerCase()]=this}),pe.fn.extend({addClass:function(e){var t,n,i,r,s,o,a,l=0;if(pe.isFunction(e))return this.each(function(t){pe(this).addClass(e.call(this,t,G(this)))});if("string"==typeof e&&e)for(t=e.match($e)||[];n=this[l++];)if(r=G(n),i=1===n.nodeType&&" "+X(r)+" "){for(o=0;s=t[o++];)i.indexOf(" "+s+" ")<0&&(i+=s+" ");a=X(i),r!==a&&n.setAttribute("class",a)}return this},removeClass:function(e){var t,n,i,r,s,o,a,l=0;if(pe.isFunction(e))return this.each(function(t){pe(this).removeClass(e.call(this,t,G(this)))});if(!arguments.length)return this.attr("class","");if("string"==typeof e&&e)for(t=e.match($e)||[];n=this[l++];)if(r=G(n),i=1===n.nodeType&&" "+X(r)+" "){for(o=0;s=t[o++];)for(;i.indexOf(" "+s+" ")>-1;)i=i.replace(" "+s+" "," ");a=X(i),r!==a&&n.setAttribute("class",a)}return this},toggleClass:function(e,t){var n=typeof e;return"boolean"==typeof t&&"string"===n?t?this.addClass(e):this.removeClass(e):pe.isFunction(e)?this.each(function(n){pe(this).toggleClass(e.call(this,n,G(this),t),t)}):this.each(function(){var t,i,r,s;if("string"===n)for(i=0,r=pe(this),s=e.match($e)||[];t=s[i++];)r.hasClass(t)?r.removeClass(t):r.addClass(t);else void 0!==e&&"boolean"!==n||(t=G(this),t&&Me.set(this,"__className__",t),this.setAttribute&&this.setAttribute("class",t||!1===e?"":Me.get(this,"__className__")||""))})},hasClass:function(e){var t,n,i=0;for(t=" "+e+" ";n=this[i++];)if(1===n.nodeType&&(" "+X(G(n))+" ").indexOf(t)>-1)return!0;return!1}});var xt=/\r/g;pe.fn.extend({val:function(e){var t,n,i,r=this[0];{if(arguments.length)return i=pe.isFunction(e),this.each(function(n){var r;1===this.nodeType&&(r=i?e.call(this,n,pe(this).val()):e,null==r?r="":"number"==typeof r?r+="":Array.isArray(r)&&(r=pe.map(r,function(e){return null==e?"":e+""})),(t=pe.valHooks[this.type]||pe.valHooks[this.nodeName.toLowerCase()])&&"set"in t&&void 0!==t.set(this,r,"value")||(this.value=r))});if(r)return(t=pe.valHooks[r.type]||pe.valHooks[r.nodeName.toLowerCase()])&&"get"in t&&void 0!==(n=t.get(r,"value"))?n:(n=r.value,"string"==typeof n?n.replace(xt,""):null==n?"":n)}}}),pe.extend({valHooks:{option:{get:function(e){var t=pe.find.attr(e,"value");return null!=t?t:X(pe.text(e))}},select:{get:function(e){var t,n,i,s=e.options,o=e.selectedIndex,a="select-one"===e.type,l=a?null:[],u=a?o+1:s.length;for(i=o<0?u:a?o:0;i<u;i++)if(n=s[i],(n.selected||i===o)&&!n.disabled&&(!n.parentNode.disabled||!r(n.parentNode,"optgroup"))){if(t=pe(n).val(),a)return t;l.push(t)}return l},set:function(e,t){for(var n,i,r=e.options,s=pe.makeArray(t),o=r.length;o--;)i=r[o],(i.selected=pe.inArray(pe.valHooks.option.get(i),s)>-1)&&(n=!0);return n||(e.selectedIndex=-1),s}}}}),pe.each(["radio","checkbox"],function(){pe.valHooks[this]={set:function(e,t){if(Array.isArray(t))return e.checked=pe.inArray(pe(e).val(),t)>-1}},fe.checkOn||(pe.valHooks[this].get=function(e){return null===e.getAttribute("value")?"on":e.value})});var wt=/^(?:focusinfocus|focusoutblur)$/;pe.extend(pe.event,{trigger:function(t,n,i,r){var s,o,a,l,u,c,h,d=[i||ne],f=ce.call(t,"type")?t.type:t,p=ce.call(t,"namespace")?t.namespace.split("."):[];if(o=a=i=i||ne,3!==i.nodeType&&8!==i.nodeType&&!wt.test(f+pe.event.triggered)&&(f.indexOf(".")>-1&&(p=f.split("."),f=p.shift(),p.sort()),u=f.indexOf(":")<0&&"on"+f,t=t[pe.expando]?t:new pe.Event(f,"object"==typeof t&&t),t.isTrigger=r?2:3,t.namespace=p.join("."),t.rnamespace=t.namespace?new RegExp("(^|\\.)"+p.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,t.result=void 0,t.target||(t.target=i),n=null==n?[t]:pe.makeArray(n,[t]),h=pe.event.special[f]||{},r||!h.trigger||!1!==h.trigger.apply(i,n))){if(!r&&!h.noBubble&&!pe.isWindow(i)){for(l=h.delegateType||f,wt.test(l+f)||(o=o.parentNode);o;o=o.parentNode)d.push(o),a=o;a===(i.ownerDocument||ne)&&d.push(a.defaultView||a.parentWindow||e)}for(s=0;(o=d[s++])&&!t.isPropagationStopped();)t.type=s>1?l:h.bindType||f,c=(Me.get(o,"events")||{})[t.type]&&Me.get(o,"handle"),c&&c.apply(o,n),(c=u&&o[u])&&c.apply&&Le(o)&&(t.result=c.apply(o,n),!1===t.result&&t.preventDefault());return t.type=f,r||t.isDefaultPrevented()||h._default&&!1!==h._default.apply(d.pop(),n)||!Le(i)||u&&pe.isFunction(i[f])&&!pe.isWindow(i)&&(a=i[u],a&&(i[u]=null),pe.event.triggered=f,i[f](),pe.event.triggered=void 0,a&&(i[u]=a)),t.result}},simulate:function(e,t,n){var i=pe.extend(new pe.Event,n,{type:e,isSimulated:!0});pe.event.trigger(i,null,t)}}),pe.fn.extend({trigger:function(e,t){return this.each(function(){pe.event.trigger(e,t,this)})},triggerHandler:function(e,t){var n=this[0];if(n)return pe.event.trigger(e,t,n,!0)}}),pe.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),function(e,t){pe.fn[t]=function(e,n){return arguments.length>0?this.on(t,null,e,n):this.trigger(t)}}),pe.fn.extend({hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)}}),fe.focusin="onfocusin"in e,fe.focusin||pe.each({focus:"focusin",blur:"focusout"},function(e,t){var n=function(e){pe.event.simulate(t,e.target,pe.event.fix(e))};pe.event.special[t]={setup:function(){var i=this.ownerDocument||this,r=Me.access(i,t);r||i.addEventListener(e,n,!0),Me.access(i,t,(r||0)+1)},teardown:function(){var i=this.ownerDocument||this,r=Me.access(i,t)-1;r?Me.access(i,t,r):(i.removeEventListener(e,n,!0),Me.remove(i,t))}}});var kt=e.location,Ct=pe.now(),Tt=/\?/;pe.parseXML=function(t){var n;if(!t||"string"!=typeof t)return null;try{n=(new e.DOMParser).parseFromString(t,"text/xml")}catch(e){n=void 0}return n&&!n.getElementsByTagName("parsererror").length||pe.error("Invalid XML: "+t),n};var Et=/\[\]$/,jt=/\r?\n/g,St=/^(?:submit|button|image|reset|file)$/i,$t=/^(?:input|select|textarea|keygen)/i;pe.param=function(e,t){var n,i=[],r=function(e,t){var n=pe.isFunction(t)?t():t;i[i.length]=encodeURIComponent(e)+"="+encodeURIComponent(null==n?"":n)};if(Array.isArray(e)||e.jquery&&!pe.isPlainObject(e))pe.each(e,function(){r(this.name,this.value)});else for(n in e)K(n,e[n],t,r);return i.join("&")},pe.fn.extend({serialize:function(){return pe.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var e=pe.prop(this,"elements");return e?pe.makeArray(e):this}).filter(function(){var e=this.type;return this.name&&!pe(this).is(":disabled")&&$t.test(this.nodeName)&&!St.test(e)&&(this.checked||!We.test(e))}).map(function(e,t){var n=pe(this).val();return null==n?null:Array.isArray(n)?pe.map(n,function(e){return{name:t.name,value:e.replace(jt,"\r\n")}}):{name:t.name,value:n.replace(jt,"\r\n")}}).get()}});var At=/%20/g,Nt=/#.*$/,Dt=/([?&])_=[^&]*/,Lt=/^(.*?):[ \t]*([^\r\n]*)$/gm,Mt=/^(?:about|app|app-storage|.+-extension|file|res|widget):$/,qt=/^(?:GET|HEAD)$/,Rt=/^\/\//,Pt={},It={},Ot="*/".concat("*"),Ht=ne.createElement("a");Ht.href=kt.href,pe.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:kt.href,type:"GET",isLocal:Mt.test(kt.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":Ot,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":pe.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,t){return t?Z(Z(e,pe.ajaxSettings),t):Z(pe.ajaxSettings,e)},ajaxPrefilter:Q(Pt),ajaxTransport:Q(It),ajax:function(t,n){function i(t,n,i,a){var u,d,f,_,x,w=n;c||(c=!0,l&&e.clearTimeout(l),r=void 0,o=a||"",k.readyState=t>0?4:0,u=t>=200&&t<300||304===t,i&&(_=J(p,k,i)),_=ee(p,_,k,u),u?(p.ifModified&&(x=k.getResponseHeader("Last-Modified"),x&&(pe.lastModified[s]=x),(x=k.getResponseHeader("etag"))&&(pe.etag[s]=x)),204===t||"HEAD"===p.type?w="nocontent":304===t?w="notmodified":(w=_.state,d=_.data,f=_.error,u=!f)):(f=w,!t&&w||(w="error",t<0&&(t=0))),k.status=t,k.statusText=(n||w)+"",u?v.resolveWith(g,[d,w,k]):v.rejectWith(g,[k,w,f]),k.statusCode(b),b=void 0,h&&m.trigger(u?"ajaxSuccess":"ajaxError",[k,p,u?d:f]),y.fireWith(g,[k,w]),h&&(m.trigger("ajaxComplete",[k,p]),--pe.active||pe.event.trigger("ajaxStop")))}"object"==typeof t&&(n=t,t=void 0),n=n||{};var r,s,o,a,l,u,c,h,d,f,p=pe.ajaxSetup({},n),g=p.context||p,m=p.context&&(g.nodeType||g.jquery)?pe(g):pe.event,v=pe.Deferred(),y=pe.Callbacks("once memory"),b=p.statusCode||{},_={},x={},w="canceled",k={readyState:0,getResponseHeader:function(e){var t;if(c){if(!a)for(a={};t=Lt.exec(o);)a[t[1].toLowerCase()]=t[2];t=a[e.toLowerCase()]}return null==t?null:t},getAllResponseHeaders:function(){return c?o:null},setRequestHeader:function(e,t){return null==c&&(e=x[e.toLowerCase()]=x[e.toLowerCase()]||e,_[e]=t),this},overrideMimeType:function(e){return null==c&&(p.mimeType=e),this},statusCode:function(e){var t;if(e)if(c)k.always(e[k.status]);else for(t in e)b[t]=[b[t],e[t]];return this},abort:function(e){var t=e||w;return r&&r.abort(t),i(0,t),this}};if(v.promise(k),p.url=((t||p.url||kt.href)+"").replace(Rt,kt.protocol+"//"),p.type=n.method||n.type||p.method||p.type,p.dataTypes=(p.dataType||"*").toLowerCase().match($e)||[""],null==p.crossDomain){u=ne.createElement("a");try{u.href=p.url,u.href=u.href,p.crossDomain=Ht.protocol+"//"+Ht.host!=u.protocol+"//"+u.host}catch(e){p.crossDomain=!0}}if(p.data&&p.processData&&"string"!=typeof p.data&&(p.data=pe.param(p.data,p.traditional)),Y(Pt,p,n,k),c)return k;h=pe.event&&p.global,h&&0==pe.active++&&pe.event.trigger("ajaxStart"),p.type=p.type.toUpperCase(),p.hasContent=!qt.test(p.type),s=p.url.replace(Nt,""),p.hasContent?p.data&&p.processData&&0===(p.contentType||"").indexOf("application/x-www-form-urlencoded")&&(p.data=p.data.replace(At,"+")):(f=p.url.slice(s.length),p.data&&(s+=(Tt.test(s)?"&":"?")+p.data,delete p.data),!1===p.cache&&(s=s.replace(Dt,"$1"),f=(Tt.test(s)?"&":"?")+"_="+Ct+++f),p.url=s+f),p.ifModified&&(pe.lastModified[s]&&k.setRequestHeader("If-Modified-Since",pe.lastModified[s]),pe.etag[s]&&k.setRequestHeader("If-None-Match",pe.etag[s])),(p.data&&p.hasContent&&!1!==p.contentType||n.contentType)&&k.setRequestHeader("Content-Type",p.contentType),k.setRequestHeader("Accept",p.dataTypes[0]&&p.accepts[p.dataTypes[0]]?p.accepts[p.dataTypes[0]]+("*"!==p.dataTypes[0]?", "+Ot+"; q=0.01":""):p.accepts["*"]);for(d in p.headers)k.setRequestHeader(d,p.headers[d]);if(p.beforeSend&&(!1===p.beforeSend.call(g,k,p)||c))return k.abort();if(w="abort",y.add(p.complete),k.done(p.success),k.fail(p.error),r=Y(It,p,n,k)){if(k.readyState=1,h&&m.trigger("ajaxSend",[k,p]),c)return k;p.async&&p.timeout>0&&(l=e.setTimeout(function(){k.abort("timeout")},p.timeout));try{c=!1,r.send(_,i)}catch(e){if(c)throw e;i(-1,e)}}else i(-1,"No Transport");return k},getJSON:function(e,t,n){return pe.get(e,t,n,"json")},getScript:function(e,t){return pe.get(e,void 0,t,"script")}}),pe.each(["get","post"],function(e,t){pe[t]=function(e,n,i,r){return pe.isFunction(n)&&(r=r||i,i=n,n=void 0),pe.ajax(pe.extend({url:e,type:t,dataType:r,data:n,success:i},pe.isPlainObject(e)&&e))}}),pe._evalUrl=function(e){return pe.ajax({url:e,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,throws:!0})},pe.fn.extend({wrapAll:function(e){var t;return this[0]&&(pe.isFunction(e)&&(e=e.call(this[0])),t=pe(e,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&t.insertBefore(this[0]),t.map(function(){for(var e=this;e.firstElementChild;)e=e.firstElementChild;return e}).append(this)),this},wrapInner:function(e){return pe.isFunction(e)?this.each(function(t){pe(this).wrapInner(e.call(this,t))}):this.each(function(){var t=pe(this),n=t.contents();n.length?n.wrapAll(e):t.append(e)})},wrap:function(e){var t=pe.isFunction(e);return this.each(function(n){pe(this).wrapAll(t?e.call(this,n):e)})},unwrap:function(e){return this.parent(e).not("body").each(function(){pe(this).replaceWith(this.childNodes)}),this}}),pe.expr.pseudos.hidden=function(e){return!pe.expr.pseudos.visible(e)},pe.expr.pseudos.visible=function(e){return!!(e.offsetWidth||e.offsetHeight||e.getClientRects().length)},pe.ajaxSettings.xhr=function(){try{return new e.XMLHttpRequest}catch(e){}};var Ft={0:200,1223:204},Bt=pe.ajaxSettings.xhr();fe.cors=!!Bt&&"withCredentials"in Bt,fe.ajax=Bt=!!Bt,pe.ajaxTransport(function(t){var n,i;if(fe.cors||Bt&&!t.crossDomain)return{send:function(r,s){var o,a=t.xhr();if(a.open(t.type,t.url,t.async,t.username,t.password),t.xhrFields)for(o in t.xhrFields)a[o]=t.xhrFields[o];t.mimeType&&a.overrideMimeType&&a.overrideMimeType(t.mimeType),t.crossDomain||r["X-Requested-With"]||(r["X-Requested-With"]="XMLHttpRequest");for(o in r)a.setRequestHeader(o,r[o]);n=function(e){return function(){n&&(n=i=a.onload=a.onerror=a.onabort=a.onreadystatechange=null,"abort"===e?a.abort():"error"===e?"number"!=typeof a.status?s(0,"error"):s(a.status,a.statusText):s(Ft[a.status]||a.status,a.statusText,"text"!==(a.responseType||"text")||"string"!=typeof a.responseText?{binary:a.response}:{text:a.responseText},a.getAllResponseHeaders()))}},a.onload=n(),i=a.onerror=n("error"),void 0!==a.onabort?a.onabort=i:a.onreadystatechange=function(){4===a.readyState&&e.setTimeout(function(){n&&i()})},n=n("abort");try{a.send(t.hasContent&&t.data||null)}catch(e){if(n)throw e}},abort:function(){n&&n()}}}),pe.ajaxPrefilter(function(e){e.crossDomain&&(e.contents.script=!1)}),pe.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(e){return pe.globalEval(e),e}}}),pe.ajaxPrefilter("script",function(e){void 0===e.cache&&(e.cache=!1),e.crossDomain&&(e.type="GET")}),pe.ajaxTransport("script",function(e){if(e.crossDomain){var t,n;return{send:function(i,r){t=pe("<script>").prop({charset:e.scriptCharset,src:e.url}).on("load error",n=function(e){t.remove(),n=null,e&&r("error"===e.type?404:200,e.type)}),ne.head.appendChild(t[0])},abort:function(){n&&n()}}}});var zt=[],Wt=/(=)\?(?=&|$)|\?\?/;pe.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=zt.pop()||pe.expando+"_"+Ct++;return this[e]=!0,e}}),pe.ajaxPrefilter("json jsonp",function(t,n,i){var r,s,o,a=!1!==t.jsonp&&(Wt.test(t.url)?"url":"string"==typeof t.data&&0===(t.contentType||"").indexOf("application/x-www-form-urlencoded")&&Wt.test(t.data)&&"data");if(a||"jsonp"===t.dataTypes[0])return r=t.jsonpCallback=pe.isFunction(t.jsonpCallback)?t.jsonpCallback():t.jsonpCallback,a?t[a]=t[a].replace(Wt,"$1"+r):!1!==t.jsonp&&(t.url+=(Tt.test(t.url)?"&":"?")+t.jsonp+"="+r),t.converters["script json"]=function(){return o||pe.error(r+" was not called"),o[0]},t.dataTypes[0]="json",s=e[r],e[r]=function(){o=arguments},i.always(function(){void 0===s?pe(e).removeProp(r):e[r]=s,t[r]&&(t.jsonpCallback=n.jsonpCallback,zt.push(r)),o&&pe.isFunction(s)&&s(o[0]),o=s=void 0}),"script"}),fe.createHTMLDocument=function(){var e=ne.implementation.createHTMLDocument("").body;return e.innerHTML="<form></form><form></form>",2===e.childNodes.length}(),pe.parseHTML=function(e,t,n){if("string"!=typeof e)return[];"boolean"==typeof t&&(n=t,t=!1);var i,r,s;return t||(fe.createHTMLDocument?(t=ne.implementation.createHTMLDocument(""),i=t.createElement("base"),i.href=ne.location.href,t.head.appendChild(i)):t=ne),r=ke.exec(e),s=!n&&[],r?[t.createElement(r[1])]:(r=_([e],t,s),s&&s.length&&pe(s).remove(),pe.merge([],r.childNodes))},pe.fn.load=function(e,t,n){var i,r,s,o=this,a=e.indexOf(" ");return a>-1&&(i=X(e.slice(a)),e=e.slice(0,a)),pe.isFunction(t)?(n=t,t=void 0):t&&"object"==typeof t&&(r="POST"),o.length>0&&pe.ajax({url:e,type:r||"GET",dataType:"html",data:t}).done(function(e){s=arguments,o.html(i?pe("<div>").append(pe.parseHTML(e)).find(i):e)}).always(n&&function(e,t){o.each(function(){n.apply(this,s||[e.responseText,t,e])})}),this},pe.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(e,t){pe.fn[t]=function(e){return this.on(t,e)}}),pe.expr.pseudos.animated=function(e){return pe.grep(pe.timers,function(t){return e===t.elem}).length},pe.offset={setOffset:function(e,t,n){var i,r,s,o,a,l,u,c=pe.css(e,"position"),h=pe(e),d={};"static"===c&&(e.style.position="relative"),a=h.offset(),s=pe.css(e,"top"),l=pe.css(e,"left"),u=("absolute"===c||"fixed"===c)&&(s+l).indexOf("auto")>-1,u?(i=h.position(),o=i.top,r=i.left):(o=parseFloat(s)||0,r=parseFloat(l)||0),pe.isFunction(t)&&(t=t.call(e,n,pe.extend({},a))),null!=t.top&&(d.top=t.top-a.top+o),null!=t.left&&(d.left=t.left-a.left+r),"using"in t?t.using.call(e,d):h.css(d)}},pe.fn.extend({offset:function(e){if(arguments.length)return void 0===e?this:this.each(function(t){pe.offset.setOffset(this,e,t)});var t,n,i,r,s=this[0];if(s)return s.getClientRects().length?(i=s.getBoundingClientRect(),t=s.ownerDocument,n=t.documentElement,r=t.defaultView,{top:i.top+r.pageYOffset-n.clientTop,left:i.left+r.pageXOffset-n.clientLeft}):{top:0,left:0}},position:function(){if(this[0]){var e,t,n=this[0],i={top:0,left:0};return"fixed"===pe.css(n,"position")?t=n.getBoundingClientRect():(e=this.offsetParent(),t=this.offset(),r(e[0],"html")||(i=e.offset()),i={top:i.top+pe.css(e[0],"borderTopWidth",!0),left:i.left+pe.css(e[0],"borderLeftWidth",!0)}),{top:t.top-i.top-pe.css(n,"marginTop",!0),left:t.left-i.left-pe.css(n,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var e=this.offsetParent;e&&"static"===pe.css(e,"position");)e=e.offsetParent;return e||Ke})}}),pe.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(e,t){var n="pageYOffset"===t;pe.fn[e]=function(i){return De(this,function(e,i,r){var s;if(pe.isWindow(e)?s=e:9===e.nodeType&&(s=e.defaultView),void 0===r)return s?s[t]:e[i];s?s.scrollTo(n?s.pageXOffset:r,n?r:s.pageYOffset):e[i]=r},e,i,arguments.length)}}),pe.each(["top","left"],function(e,t){pe.cssHooks[t]=L(fe.pixelPosition,function(e,n){if(n)return n=D(e,t),st.test(n)?pe(e).position()[t]+"px":n})}),pe.each({Height:"height",Width:"width"},function(e,t){pe.each({padding:"inner"+e,content:t,"":"outer"+e},function(n,i){pe.fn[i]=function(r,s){var o=arguments.length&&(n||"boolean"!=typeof r),a=n||(!0===r||!0===s?"margin":"border");return De(this,function(t,n,r){var s;return pe.isWindow(t)?0===i.indexOf("outer")?t["inner"+e]:t.document.documentElement["client"+e]:9===t.nodeType?(s=t.documentElement,Math.max(t.body["scroll"+e],s["scroll"+e],t.body["offset"+e],s["offset"+e],s["client"+e])):void 0===r?pe.css(t,n,a):pe.style(t,n,r,a)},t,o?r:void 0,o)}})}),pe.fn.extend({bind:function(e,t,n){return this.on(e,null,t,n)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,n,i){return this.on(t,e,n,i)},undelegate:function(e,t,n){return 1===arguments.length?this.off(e,"**"):this.off(t,e||"**",n)}}),pe.holdReady=function(e){e?pe.readyWait++:pe.ready(!0)},pe.isArray=Array.isArray,pe.parseJSON=JSON.parse,pe.nodeName=r,"function"==typeof define&&define.amd&&define("jquery",[],function(){return pe});var Ut=e.jQuery,Vt=e.$;return pe.noConflict=function(t){return e.$===pe&&(e.$=Vt),t&&e.jQuery===pe&&(e.jQuery=Ut),pe},t||(e.jQuery=e.$=pe),pe}),function(e,t){"object"==typeof module&&module.exports?module.exports=t():"function"==typeof define&&define.amd?define(t):e.Spinner=t()}(this,function(){"use strict";function e(e,t){var n,i=document.createElement(e||"div");for(n in t)i[n]=t[n];return i}function t(e){for(var t=1,n=arguments.length;t<n;t++)e.appendChild(arguments[t]);return e}function n(e,t,n,i){var r=["opacity",t,~~(100*e),n,i].join("-"),s=.01+n/i*100,o=Math.max(1-(1-e)/t*(100-s),e),a=l.substring(0,l.indexOf("Animation")).toLowerCase(),c=a&&"-"+a+"-"||"";return h[r]||(u.insertRule("@"+c+"keyframes "+r+"{0%{opacity:"+o+"}"+s+"%{opacity:"+e+"}"+(s+.01)+"%{opacity:1}"+(s+t)%100+"%{opacity:"+e+"}100%{opacity:"+o+"}}",u.cssRules.length),h[r]=1),r}function i(e,t){var n,i,r=e.style;if(t=t.charAt(0).toUpperCase()+t.slice(1),void 0!==r[t])return t;for(i=0;i<c.length;i++)if(n=c[i]+t,void 0!==r[n])return n}function r(e,t){for(var n in t)e.style[i(e,n)||n]=t[n];return e}function s(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var i in n)void 0===e[i]&&(e[i]=n[i])}return e}function o(e,t){return"string"==typeof e?e:e[t%e.length]}function a(e){this.opts=s(e||{},a.defaults,d)}var l,u,c=["webkit","Moz","ms","O"],h={},d={lines:12,length:7,width:5,radius:10,scale:1,corners:1,color:"#000",opacity:.25,rotate:0,direction:1,speed:1,trail:100,fps:20,zIndex:2e9,className:"spinner",top:"50%",left:"50%",shadow:!1,hwaccel:!1,position:"absolute"};if(a.defaults={},s(a.prototype,{spin:function(t){this.stop();var n=this,i=n.opts,s=n.el=e(null,{className:i.className});if(r(s,{position:i.position,width:0,zIndex:i.zIndex,left:i.left,top:i.top}),t&&t.insertBefore(s,t.firstChild||null),s.setAttribute("role","progressbar"),n.lines(s,n.opts),!l){var o,a=0,u=(i.lines-1)*(1-i.direction)/2,c=i.fps,h=c/i.speed,d=(1-i.opacity)/(h*i.trail/100),f=h/i.lines;!function e(){a++;for(var t=0;t<i.lines;t++)o=Math.max(1-(a+(i.lines-t)*f)%h*d,i.opacity),n.opacity(s,t*i.direction+u,o,i);n.timeout=n.el&&setTimeout(e,~~(1e3/c))}()}return n},stop:function(){var e=this.el;return e&&(clearTimeout(this.timeout),e.parentNode&&e.parentNode.removeChild(e),this.el=void 0),this},lines:function(i,s){function a(t,n){return r(e(),{position:"absolute",width:s.scale*(s.length+s.width)+"px",height:s.scale*s.width+"px",background:t,boxShadow:n,transformOrigin:"left",transform:"rotate("+~~(360/s.lines*c+s.rotate)+"deg) translate("+s.scale*s.radius+"px,0)",borderRadius:(s.corners*s.scale*s.width>>1)+"px"})}for(var u,c=0,h=(s.lines-1)*(1-s.direction)/2;c<s.lines;c++)u=r(e(),{position:"absolute",top:1+~(s.scale*s.width/2)+"px",transform:s.hwaccel?"translate3d(0,0,0)":"",opacity:s.opacity,animation:l&&n(s.opacity,s.trail,h+c*s.direction,s.lines)+" "+1/s.speed+"s linear infinite"}),s.shadow&&t(u,r(a("#000","0 0 4px #000"),{top:"2px"})),t(i,t(u,a(o(s.color,c),"0 0 1px rgba(0,0,0,.1)")));return i},opacity:function(e,t,n){t<e.childNodes.length&&(e.childNodes[t].style.opacity=n)}}),"undefined"!=typeof document){u=function(){var n=e("style",{type:"text/css"});return t(document.getElementsByTagName("head")[0],n),n.sheet||n.styleSheet}();var f=r(e("group"),{behavior:"url(#default#VML)"});!i(f,"transform")&&f.adj?function(){function n(t,n){return e("<"+t+' xmlns="urn:schemas-microsoft.com:vml" class="spin-vml">',n)}u.addRule(".spin-vml","behavior:url(#default#VML)"),a.prototype.lines=function(e,i){function s(){return r(n("group",{coordsize:c+" "+c,coordorigin:-u+" "+-u}),{width:c,height:c})}function a(e,a,l){t(d,t(r(s(),{rotation:360/i.lines*e+"deg",left:~~a}),t(r(n("roundrect",{arcsize:i.corners}),{width:u,height:i.scale*i.width,left:i.scale*i.radius,top:-i.scale*i.width>>1,filter:l}),n("fill",{color:o(i.color,e),opacity:i.opacity}),n("stroke",{opacity:0}))))}var l,u=i.scale*(i.length+i.width),c=2*i.scale*u,h=-(i.width+i.length)*i.scale*2+"px",d=r(s(),{position:"absolute",top:h,left:h});if(i.shadow)for(l=1;l<=i.lines;l++)a(l,-2,"progid:DXImageTransform.Microsoft.Blur(pixelradius=2,makeshadow=1,shadowopacity=.3)");for(l=1;l<=i.lines;l++)a(l);return t(e,d)},a.prototype.opacity=function(e,t,n,i){var r=e.firstChild;i=i.shadow&&i.lines||0,r&&t+i<r.childNodes.length&&(r=r.childNodes[t+i],r=r&&r.firstChild,(r=r&&r.firstChild)&&(r.opacity=n))}}():l=i(f,"animation")}return a}),function(e){if("object"==typeof exports)e(require("jquery"),require("spin.js"));else if("function"==typeof define&&define.amd)define(["jquery","spin"],e);else{if(!window.Spinner)throw new Error("Spin.js not present");e(window.jQuery,window.Spinner)}}(function(e,t){e.fn.spin=function(n,i){return this.each(function(){var r=e(this),s=r.data();s.spinner&&(s.spinner.stop(),delete s.spinner),!1!==n&&(n=e.extend({color:i||r.css("color")},e.fn.spin.presets[n]||n),s.spinner=new t(n).spin(this))})},e.fn.spin.presets={tiny:{lines:8,length:2,width:2,radius:3},small:{lines:8,length:4,width:3,radius:5},large:{lines:10,length:8,width:4,radius:8}}}),function(e,t,n){"function"==typeof define&&define.amd?define(["jquery"],e):"object"==typeof exports?module.exports=e(require("jquery")):e(t||n)}(function(e){var t=function(t,n,i){var r={invalid:[],getCaret:function(){try{var e,n=0,i=t.get(0),s=document.selection,o=i.selectionStart;return s&&-1===navigator.appVersion.indexOf("MSIE 10")?(e=s.createRange(),e.moveStart("character",-r.val().length),n=e.text.length):(o||"0"===o)&&(n=o),n}catch(e){}},setCaret:function(e){try{if(t.is(":focus")){var n,i=t.get(0);i.setSelectionRange?i.setSelectionRange(e,e):(n=i.createTextRange(),n.collapse(!0),n.moveEnd("character",e),n.moveStart("character",e),n.select())}}catch(e){}},events:function(){t.on("keydown.mask",function(e){t.data("mask-keycode",e.keyCode||e.which),t.data("mask-previus-value",t.val()),t.data("mask-previus-caret-pos",r.getCaret()),r.maskDigitPosMapOld=r.maskDigitPosMap}).on(e.jMaskGlobals.useInput?"input.mask":"keyup.mask",r.behaviour).on("paste.mask drop.mask",function(){setTimeout(function(){t.keydown().keyup()},100)}).on("change.mask",function(){t.data("changed",!0)}).on("blur.mask",function(){a===r.val()||t.data("changed")||t.trigger("change"),t.data("changed",!1)}).on("blur.mask",function(){a=r.val()}).on("focus.mask",function(t){!0===i.selectOnFocus&&e(t.target).select()}).on("focusout.mask",function(){i.clearIfNotMatch&&!s.test(r.val())&&r.val("")})},getRegexMask:function(){for(var e,t,i,r,s,a,l=[],u=0;u<n.length;u++)e=o.translation[n.charAt(u)],e?(t=e.pattern.toString().replace(/.{1}$|^.{1}/g,""),i=e.optional,r=e.recursive,r?(l.push(n.charAt(u)),s={digit:n.charAt(u),pattern:t}):l.push(i||r?t+"?":t)):l.push(n.charAt(u).replace(/[-\/\\^$*+?.()|[\]{}]/g,"\\$&"));return a=l.join(""),s&&(a=a.replace(new RegExp("("+s.digit+"(.*"+s.digit+")?)"),"($1)?").replace(new RegExp(s.digit,"g"),s.pattern)),new RegExp(a)},destroyEvents:function(){t.off(["input","keydown","keyup","paste","drop","blur","focusout",""].join(".mask "))},val:function(e){var n,i=t.is("input"),r=i?"val":"text";return arguments.length>0?(t[r]()!==e&&t[r](e),n=t):n=t[r](),n},calculateCaretPosition:function(){var e=t.data("mask-previus-value")||"",n=r.getMasked(),i=r.getCaret();if(e!==n){var s=t.data("mask-previus-caret-pos")||0,o=n.length,a=e.length,l=0,u=0,c=0,h=0,d=0;for(d=i;d<o&&r.maskDigitPosMap[d];d++)u++;for(d=i-1;d>=0&&r.maskDigitPosMap[d];d--)l++;for(d=i-1;d>=0;d--)r.maskDigitPosMap[d]&&c++;for(d=s-1;d>=0;d--)r.maskDigitPosMapOld[d]&&h++;if(i>a)i=o;else if(s>=i&&s!==a){if(!r.maskDigitPosMapOld[i]){var f=i;i-=h-c,i-=l,r.maskDigitPosMap[i]&&(i=f)}}else i>s&&(i+=c-h,i+=u)}return i},behaviour:function(n){n=n||window.event,r.invalid=[];var i=t.data("mask-keycode");if(-1===e.inArray(i,o.byPassKeys)){var s=r.getMasked(),a=r.getCaret();return setTimeout(function(){r.setCaret(r.calculateCaretPosition())},10),r.val(s),r.setCaret(a),r.callbacks(n)}},getMasked:function(e,t){var s,a,l=[],u=void 0===t?r.val():t+"",c=0,h=n.length,d=0,f=u.length,p=1,g="push",m=-1,v=0,y=[];i.reverse?(g="unshift",p=-1,s=0,c=h-1,d=f-1,a=function(){return c>-1&&d>-1}):(s=h-1,a=function(){return c<h&&d<f});for(var b;a();){var _=n.charAt(c),x=u.charAt(d),w=o.translation[_];w?(x.match(w.pattern)?(l[g](x),w.recursive&&(-1===m?m=c:c===s&&(c=m-p),s===m&&(c-=p)),c+=p):x===b?(v--,b=void 0):w.optional?(c+=p,d-=p):w.fallback?(l[g](w.fallback),c+=p,d-=p):r.invalid.push({p:d,v:x,e:w.pattern}),d+=p):(e||l[g](_),x===_?(y.push(d),d+=p):(b=_,y.push(d+v),v++),c+=p)}var k=n.charAt(s)
;h!==f+1||o.translation[k]||l.push(k);var C=l.join("");return r.mapMaskdigitPositions(C,y,f),C},mapMaskdigitPositions:function(e,t,n){var s=i.reverse?e.length-n:0;r.maskDigitPosMap={};for(var o=0;o<t.length;o++)r.maskDigitPosMap[t[o]+s]=1},callbacks:function(e){var s=r.val(),o=s!==a,l=[s,e,t,i],u=function(e,t,n){"function"==typeof i[e]&&t&&i[e].apply(this,n)};u("onChange",!0===o,l),u("onKeyPress",!0===o,l),u("onComplete",s.length===n.length,l),u("onInvalid",r.invalid.length>0,[s,e,t,r.invalid,i])}};t=e(t);var s,o=this,a=r.val();n="function"==typeof n?n(r.val(),void 0,t,i):n,o.mask=n,o.options=i,o.remove=function(){var e=r.getCaret();return r.destroyEvents(),r.val(o.getCleanVal()),r.setCaret(e),t},o.getCleanVal=function(){return r.getMasked(!0)},o.getMaskedVal=function(e){return r.getMasked(!1,e)},o.init=function(a){if(a=a||!1,i=i||{},o.clearIfNotMatch=e.jMaskGlobals.clearIfNotMatch,o.byPassKeys=e.jMaskGlobals.byPassKeys,o.translation=e.extend({},e.jMaskGlobals.translation,i.translation),o=e.extend(!0,{},o,i),s=r.getRegexMask(),a)r.events(),r.val(r.getMasked());else{i.placeholder&&t.attr("placeholder",i.placeholder),t.data("mask")&&t.attr("autocomplete","off");for(var l=0,u=!0;l<n.length;l++){var c=o.translation[n.charAt(l)];if(c&&c.recursive){u=!1;break}}u&&t.attr("maxlength",n.length),r.destroyEvents(),r.events();var h=r.getCaret();r.val(r.getMasked()),r.setCaret(h)}},o.init(!t.is("input"))};e.maskWatchers={};var n=function(){var n=e(this),r={},s=n.attr("data-mask");if(n.attr("data-mask-reverse")&&(r.reverse=!0),n.attr("data-mask-clearifnotmatch")&&(r.clearIfNotMatch=!0),"true"===n.attr("data-mask-selectonfocus")&&(r.selectOnFocus=!0),i(n,s,r))return n.data("mask",new t(this,s,r))},i=function(t,n,i){i=i||{};var r=e(t).data("mask"),s=JSON.stringify,o=e(t).val()||e(t).text();try{return"function"==typeof n&&(n=n(o)),"object"!=typeof r||s(r.options)!==s(i)||r.mask!==n}catch(e){}};e.fn.mask=function(n,r){r=r||{};var s=this.selector,o=e.jMaskGlobals,a=o.watchInterval,l=r.watchInputs||o.watchInputs,u=function(){if(i(this,n,r))return e(this).data("mask",new t(this,n,r))};return e(this).each(u),s&&""!==s&&l&&(clearInterval(e.maskWatchers[s]),e.maskWatchers[s]=setInterval(function(){e(document).find(s).each(u)},a)),this},e.fn.masked=function(e){return this.data("mask").getMaskedVal(e)},e.fn.unmask=function(){return clearInterval(e.maskWatchers[this.selector]),delete e.maskWatchers[this.selector],this.each(function(){var t=e(this).data("mask");t&&t.remove().removeData("mask")})},e.fn.cleanVal=function(){return this.data("mask").getCleanVal()},e.applyDataMask=function(t){t=t||e.jMaskGlobals.maskElements,(t instanceof e?t:e(t)).filter(e.jMaskGlobals.dataMaskAttr).each(n)};var r={maskElements:"input,td,span,div",dataMaskAttr:"*[data-mask]",dataMask:!0,watchInterval:300,watchInputs:!0,useInput:!/Chrome\/[2-4][0-9]|SamsungBrowser/.test(window.navigator.userAgent)&&function(e){var t,n=document.createElement("div");return e="on"+e,t=e in n,t||(n.setAttribute(e,"return;"),t="function"==typeof n[e]),n=null,t}("input"),watchDataMask:!1,byPassKeys:[9,16,17,18,36,37,38,39,40,91],translation:{0:{pattern:/\d/},9:{pattern:/\d/,optional:!0},"#":{pattern:/\d/,recursive:!0},A:{pattern:/[a-zA-Z0-9]/},S:{pattern:/[a-zA-Z]/}}};e.jMaskGlobals=e.jMaskGlobals||{},r=e.jMaskGlobals=e.extend(!0,{},r,e.jMaskGlobals),r.dataMask&&e.applyDataMask(),setInterval(function(){e.jMaskGlobals.watchDataMask&&e.applyDataMask()},r.watchInterval)},window.jQuery,window.Zepto),function(e){"function"==typeof define&&define.amd?define(["jquery"],e):"object"==typeof module&&module.exports?module.exports=e(require("jquery")):e(jQuery)}(function(e){e.extend(e.fn,{validate:function(t){if(!this.length)return void(t&&t.debug&&window.console&&console.warn("Nothing selected, can't validate, returning nothing."));var n=e.data(this[0],"validator");return n||(this.attr("novalidate","novalidate"),n=new e.validator(t,this[0]),e.data(this[0],"validator",n),n.settings.onsubmit&&(this.on("click.validate",":submit",function(t){n.settings.submitHandler&&(n.submitButton=t.target),e(this).hasClass("cancel")&&(n.cancelSubmit=!0),void 0!==e(this).attr("formnovalidate")&&(n.cancelSubmit=!0)}),this.on("submit.validate",function(t){function i(){var i,r;return!n.settings.submitHandler||(n.submitButton&&(i=e("<input type='hidden'/>").attr("name",n.submitButton.name).val(e(n.submitButton).val()).appendTo(n.currentForm)),r=n.settings.submitHandler.call(n,n.currentForm,t),n.submitButton&&i.remove(),void 0!==r&&r)}return n.settings.debug&&t.preventDefault(),n.cancelSubmit?(n.cancelSubmit=!1,i()):n.form()?n.pendingRequest?(n.formSubmitted=!0,!1):i():(n.focusInvalid(),!1)})),n)},valid:function(){var t,n,i;return e(this[0]).is("form")?t=this.validate().form():(i=[],t=!0,n=e(this[0].form).validate(),this.each(function(){(t=n.element(this)&&t)||(i=i.concat(n.errorList))}),n.errorList=i),t},rules:function(t,n){var i,r,s,o,a,l,u=this[0];if(null!=u&&null!=u.form){if(t)switch(i=e.data(u.form,"validator").settings,r=i.rules,s=e.validator.staticRules(u),t){case"add":e.extend(s,e.validator.normalizeRule(n)),delete s.messages,r[u.name]=s,n.messages&&(i.messages[u.name]=e.extend(i.messages[u.name],n.messages));break;case"remove":return n?(l={},e.each(n.split(/\s/),function(t,n){l[n]=s[n],delete s[n],"required"===n&&e(u).removeAttr("aria-required")}),l):(delete r[u.name],s)}return o=e.validator.normalizeRules(e.extend({},e.validator.classRules(u),e.validator.attributeRules(u),e.validator.dataRules(u),e.validator.staticRules(u)),u),o.required&&(a=o.required,delete o.required,o=e.extend({required:a},o),e(u).attr("aria-required","true")),o.remote&&(a=o.remote,delete o.remote,o=e.extend(o,{remote:a})),o}}}),e.extend(e.expr.pseudos||e.expr[":"],{blank:function(t){return!e.trim(""+e(t).val())},filled:function(t){var n=e(t).val();return null!==n&&!!e.trim(""+n)},unchecked:function(t){return!e(t).prop("checked")}}),e.validator=function(t,n){this.settings=e.extend(!0,{},e.validator.defaults,t),this.currentForm=n,this.init()},e.validator.format=function(t,n){return 1===arguments.length?function(){var n=e.makeArray(arguments);return n.unshift(t),e.validator.format.apply(this,n)}:void 0===n?t:(arguments.length>2&&n.constructor!==Array&&(n=e.makeArray(arguments).slice(1)),n.constructor!==Array&&(n=[n]),e.each(n,function(e,n){t=t.replace(new RegExp("\\{"+e+"\\}","g"),function(){return n})}),t)},e.extend(e.validator,{defaults:{messages:{},groups:{},rules:{},errorClass:"error",pendingClass:"pending",validClass:"valid",errorElement:"label",focusCleanup:!1,focusInvalid:!0,errorContainer:e([]),errorLabelContainer:e([]),onsubmit:!0,ignore:":hidden",ignoreTitle:!1,onfocusin:function(e){this.lastActive=e,this.settings.focusCleanup&&(this.settings.unhighlight&&this.settings.unhighlight.call(this,e,this.settings.errorClass,this.settings.validClass),this.hideThese(this.errorsFor(e)))},onfocusout:function(e){this.checkable(e)||!(e.name in this.submitted)&&this.optional(e)||this.element(e)},onkeyup:function(t,n){var i=[16,17,18,20,35,36,37,38,39,40,45,144,225];9===n.which&&""===this.elementValue(t)||-1!==e.inArray(n.keyCode,i)||(t.name in this.submitted||t.name in this.invalid)&&this.element(t)},onclick:function(e){e.name in this.submitted?this.element(e):e.parentNode.name in this.submitted&&this.element(e.parentNode)},highlight:function(t,n,i){"radio"===t.type?this.findByName(t.name).addClass(n).removeClass(i):e(t).addClass(n).removeClass(i)},unhighlight:function(t,n,i){"radio"===t.type?this.findByName(t.name).removeClass(n).addClass(i):e(t).removeClass(n).addClass(i)}},setDefaults:function(t){e.extend(e.validator.defaults,t)},messages:{required:"This field is required.",remote:"Please fix this field.",email:"Please enter a valid email address.",url:"Please enter a valid URL.",date:"Please enter a valid date.",dateISO:"Please enter a valid date (ISO).",number:"Please enter a valid number.",digits:"Please enter only digits.",equalTo:"Please enter the same value again.",maxlength:e.validator.format("Please enter no more than {0} characters."),minlength:e.validator.format("Please enter at least {0} characters."),rangelength:e.validator.format("Please enter a value between {0} and {1} characters long."),range:e.validator.format("Please enter a value between {0} and {1}."),max:e.validator.format("Please enter a value less than or equal to {0}."),min:e.validator.format("Please enter a value greater than or equal to {0}."),step:e.validator.format("Please enter a multiple of {0}.")},autoCreateRanges:!1,prototype:{init:function(){function t(t){!this.form&&this.hasAttribute("contenteditable")&&(this.form=e(this).closest("form")[0]);var n=e.data(this.form,"validator"),i="on"+t.type.replace(/^validate/,""),r=n.settings;r[i]&&!e(this).is(r.ignore)&&r[i].call(n,this,t)}this.labelContainer=e(this.settings.errorLabelContainer),this.errorContext=this.labelContainer.length&&this.labelContainer||e(this.currentForm),this.containers=e(this.settings.errorContainer).add(this.settings.errorLabelContainer),this.submitted={},this.valueCache={},this.pendingRequest=0,this.pending={},this.invalid={},this.reset();var n,i=this.groups={};e.each(this.settings.groups,function(t,n){"string"==typeof n&&(n=n.split(/\s/)),e.each(n,function(e,n){i[n]=t})}),n=this.settings.rules,e.each(n,function(t,i){n[t]=e.validator.normalizeRule(i)}),e(this.currentForm).on("focusin.validate focusout.validate keyup.validate",":text, [type='password'], [type='file'], select, textarea, [type='number'], [type='search'], [type='tel'], [type='url'], [type='email'], [type='datetime'], [type='date'], [type='month'], [type='week'], [type='time'], [type='datetime-local'], [type='range'], [type='color'], [type='radio'], [type='checkbox'], [contenteditable], [type='button']",t).on("click.validate","select, option, [type='radio'], [type='checkbox']",t),this.settings.invalidHandler&&e(this.currentForm).on("invalid-form.validate",this.settings.invalidHandler),e(this.currentForm).find("[required], [data-rule-required], .required").attr("aria-required","true")},form:function(){return this.checkForm(),e.extend(this.submitted,this.errorMap),this.invalid=e.extend({},this.errorMap),this.valid()||e(this.currentForm).triggerHandler("invalid-form",[this]),this.showErrors(),this.valid()},checkForm:function(){this.prepareForm();for(var e=0,t=this.currentElements=this.elements();t[e];e++)this.check(t[e]);return this.valid()},element:function(t){var n,i,r=this.clean(t),s=this.validationTargetFor(r),o=this,a=!0;return void 0===s?delete this.invalid[r.name]:(this.prepareElement(s),this.currentElements=e(s),i=this.groups[s.name],i&&e.each(this.groups,function(e,t){t===i&&e!==s.name&&(r=o.validationTargetFor(o.clean(o.findByName(e))))&&r.name in o.invalid&&(o.currentElements.push(r),a=o.check(r)&&a)}),n=!1!==this.check(s),a=a&&n,this.invalid[s.name]=!n,this.numberOfInvalids()||(this.toHide=this.toHide.add(this.containers)),this.showErrors(),e(t).attr("aria-invalid",!n)),a},showErrors:function(t){if(t){var n=this;e.extend(this.errorMap,t),this.errorList=e.map(this.errorMap,function(e,t){return{message:e,element:n.findByName(t)[0]}}),this.successList=e.grep(this.successList,function(e){return!(e.name in t)})}this.settings.showErrors?this.settings.showErrors.call(this,this.errorMap,this.errorList):this.defaultShowErrors()},resetForm:function(){e.fn.resetForm&&e(this.currentForm).resetForm(),this.invalid={},this.submitted={},this.prepareForm(),this.hideErrors();var t=this.elements().removeData("previousValue").removeAttr("aria-invalid");this.resetElements(t)},resetElements:function(e){var t;if(this.settings.unhighlight)for(t=0;e[t];t++)this.settings.unhighlight.call(this,e[t],this.settings.errorClass,""),this.findByName(e[t].name).removeClass(this.settings.validClass);else e.removeClass(this.settings.errorClass).removeClass(this.settings.validClass)},numberOfInvalids:function(){return this.objectLength(this.invalid)},objectLength:function(e){var t,n=0;for(t in e)e[t]&&n++;return n},hideErrors:function(){this.hideThese(this.toHide)},hideThese:function(e){e.not(this.containers).text(""),this.addWrapper(e).hide()},valid:function(){return 0===this.size()},size:function(){return this.errorList.length},focusInvalid:function(){if(this.settings.focusInvalid)try{e(this.findLastActive()||this.errorList.length&&this.errorList[0].element||[]).filter(":visible").focus().trigger("focusin")}catch(e){}},findLastActive:function(){var t=this.lastActive;return t&&1===e.grep(this.errorList,function(e){return e.element.name===t.name}).length&&t},elements:function(){var t=this,n={};return e(this.currentForm).find("input, select, textarea, [contenteditable]").not(":submit, :reset, :image, :disabled").not(this.settings.ignore).filter(function(){var i=this.name||e(this).attr("name");return!i&&t.settings.debug&&window.console&&console.error("%o has no name assigned",this),this.hasAttribute("contenteditable")&&(this.form=e(this).closest("form")[0]),!(i in n||!t.objectLength(e(this).rules()))&&(n[i]=!0,!0)})},clean:function(t){return e(t)[0]},errors:function(){var t=this.settings.errorClass.split(" ").join(".");return e(this.settings.errorElement+"."+t,this.errorContext)},resetInternals:function(){this.successList=[],this.errorList=[],this.errorMap={},this.toShow=e([]),this.toHide=e([])},reset:function(){this.resetInternals(),this.currentElements=e([])},prepareForm:function(){this.reset(),this.toHide=this.errors().add(this.containers)},prepareElement:function(e){this.reset(),this.toHide=this.errorsFor(e)},elementValue:function(t){var n,i,r=e(t),s=t.type;return"radio"===s||"checkbox"===s?this.findByName(t.name).filter(":checked").val():"number"===s&&void 0!==t.validity?t.validity.badInput?"NaN":r.val():(n=t.hasAttribute("contenteditable")?r.text():r.val(),"file"===s?"C:\\fakepath\\"===n.substr(0,12)?n.substr(12):(i=n.lastIndexOf("/"))>=0?n.substr(i+1):(i=n.lastIndexOf("\\"),i>=0?n.substr(i+1):n):"string"==typeof n?n.replace(/\r/g,""):n)},check:function(t){t=this.validationTargetFor(this.clean(t));var n,i,r,s=e(t).rules(),o=e.map(s,function(e,t){return t}).length,a=!1,l=this.elementValue(t);if("function"==typeof s.normalizer){if("string"!=typeof(l=s.normalizer.call(t,l)))throw new TypeError("The normalizer should return a string value.");delete s.normalizer}for(i in s){r={method:i,parameters:s[i]};try{if("dependency-mismatch"===(n=e.validator.methods[i].call(this,l,t,r.parameters))&&1===o){a=!0;continue}if(a=!1,"pending"===n)return void(this.toHide=this.toHide.not(this.errorsFor(t)));if(!n)return this.formatAndAdd(t,r),!1}catch(e){throw this.settings.debug&&window.console&&console.log("Exception occurred when checking element "+t.id+", check the '"+r.method+"' method.",e),e instanceof TypeError&&(e.message+=".  Exception occurred when checking element "+t.id+", check the '"+r.method+"' method."),e}}if(!a)return this.objectLength(s)&&this.successList.push(t),!0},customDataMessage:function(t,n){return e(t).data("msg"+n.charAt(0).toUpperCase()+n.substring(1).toLowerCase())||e(t).data("msg")},customMessage:function(e,t){var n=this.settings.messages[e];return n&&(n.constructor===String?n:n[t])},findDefined:function(){for(var e=0;e<arguments.length;e++)if(void 0!==arguments[e])return arguments[e]},defaultMessage:function(t,n){"string"==typeof n&&(n={method:n});var i=this.findDefined(this.customMessage(t.name,n.method),this.customDataMessage(t,n.method),!this.settings.ignoreTitle&&t.title||void 0,e.validator.messages[n.method],"<strong>Warning: No message defined for "+t.name+"</strong>"),r=/\$?\{(\d+)\}/g;return"function"==typeof i?i=i.call(this,n.parameters,t):r.test(i)&&(i=e.validator.format(i.replace(r,"{$1}"),n.parameters)),i},formatAndAdd:function(e,t){var n=this.defaultMessage(e,t);this.errorList.push({message:n,element:e,method:t.method}),this.errorMap[e.name]=n,this.submitted[e.name]=n},addWrapper:function(e){return this.settings.wrapper&&(e=e.add(e.parent(this.settings.wrapper))),e},defaultShowErrors:function(){var e,t,n;for(e=0;this.errorList[e];e++)n=this.errorList[e],this.settings.highlight&&this.settings.highlight.call(this,n.element,this.settings.errorClass,this.settings.validClass),this.showLabel(n.element,n.message);if(this.errorList.length&&(this.toShow=this.toShow.add(this.containers)),this.settings.success)for(e=0;this.successList[e];e++)this.showLabel(this.successList[e]);if(this.settings.unhighlight)for(e=0,t=this.validElements();t[e];e++)this.settings.unhighlight.call(this,t[e],this.settings.errorClass,this.settings.validClass);this.toHide=this.toHide.not(this.toShow),this.hideErrors(),this.addWrapper(this.toShow).show()},validElements:function(){return this.currentElements.not(this.invalidElements())},invalidElements:function(){return e(this.errorList).map(function(){return this.element})},showLabel:function(t,n){var i,r,s,o,a=this.errorsFor(t),l=this.idOrName(t),u=e(t).attr("aria-describedby");a.length?(a.removeClass(this.settings.validClass).addClass(this.settings.errorClass),a.html(n)):(a=e("<"+this.settings.errorElement+">").attr("id",l+"-error").addClass(this.settings.errorClass).html(n||""),i=a,this.settings.wrapper&&(i=a.hide().show().wrap("<"+this.settings.wrapper+"/>").parent()),this.labelContainer.length?this.labelContainer.append(i):this.settings.errorPlacement?this.settings.errorPlacement.call(this,i,e(t)):i.insertAfter(t),a.is("label")?a.attr("for",l):0===a.parents("label[for='"+this.escapeCssMeta(l)+"']").length&&(s=a.attr("id"),u?u.match(new RegExp("\\b"+this.escapeCssMeta(s)+"\\b"))||(u+=" "+s):u=s,e(t).attr("aria-describedby",u),(r=this.groups[t.name])&&(o=this,e.each(o.groups,function(t,n){n===r&&e("[name='"+o.escapeCssMeta(t)+"']",o.currentForm).attr("aria-describedby",a.attr("id"))})))),!n&&this.settings.success&&(a.text(""),"string"==typeof this.settings.success?a.addClass(this.settings.success):this.settings.success(a,t)),this.toShow=this.toShow.add(a)},errorsFor:function(t){var n=this.escapeCssMeta(this.idOrName(t)),i=e(t).attr("aria-describedby"),r="label[for='"+n+"'], label[for='"+n+"'] *";return i&&(r=r+", #"+this.escapeCssMeta(i).replace(/\s+/g,", #")),this.errors().filter(r)},escapeCssMeta:function(e){return e.replace(/([\\!"#$%&'()*+,.\/:;<=>?@\[\]^`{|}~])/g,"\\$1")},idOrName:function(e){return this.groups[e.name]||(this.checkable(e)?e.name:e.id||e.name)},validationTargetFor:function(t){return this.checkable(t)&&(t=this.findByName(t.name)),e(t).not(this.settings.ignore)[0]},checkable:function(e){return/radio|checkbox/i.test(e.type)},findByName:function(t){return e(this.currentForm).find("[name='"+this.escapeCssMeta(t)+"']")},getLength:function(t,n){switch(n.nodeName.toLowerCase()){case"select":return e("option:selected",n).length;case"input":if(this.checkable(n))return this.findByName(n.name).filter(":checked").length}return t.length},depend:function(e,t){return!this.dependTypes[typeof e]||this.dependTypes[typeof e](e,t)},dependTypes:{boolean:function(e){return e},string:function(t,n){return!!e(t,n.form).length},function:function(e,t){return e(t)}},optional:function(t){var n=this.elementValue(t);return!e.validator.methods.required.call(this,n,t)&&"dependency-mismatch"},startRequest:function(t){this.pending[t.name]||(this.pendingRequest++,e(t).addClass(this.settings.pendingClass),this.pending[t.name]=!0)},stopRequest:function(t,n){this.pendingRequest--,this.pendingRequest<0&&(this.pendingRequest=0),delete this.pending[t.name],e(t).removeClass(this.settings.pendingClass),n&&0===this.pendingRequest&&this.formSubmitted&&this.form()?(e(this.currentForm).submit(),this.formSubmitted=!1):!n&&0===this.pendingRequest&&this.formSubmitted&&(e(this.currentForm).triggerHandler("invalid-form",[this]),this.formSubmitted=!1)},previousValue:function(t,n){return n="string"==typeof n&&n||"remote",e.data(t,"previousValue")||e.data(t,"previousValue",{old:null,valid:!0,message:this.defaultMessage(t,{method:n})})},destroy:function(){this.resetForm(),e(this.currentForm).off(".validate").removeData("validator").find(".validate-equalTo-blur").off(".validate-equalTo").removeClass("validate-equalTo-blur")}},classRuleSettings:{required:{required:!0},email:{email:!0},url:{url:!0},date:{date:!0},dateISO:{dateISO:!0},number:{number:!0},digits:{digits:!0},creditcard:{creditcard:!0}},addClassRules:function(t,n){t.constructor===String?this.classRuleSettings[t]=n:e.extend(this.classRuleSettings,t)},classRules:function(t){var n={},i=e(t).attr("class");return i&&e.each(i.split(" "),function(){this in e.validator.classRuleSettings&&e.extend(n,e.validator.classRuleSettings[this])}),n},normalizeAttributeRule:function(e,t,n,i){/min|max|step/.test(n)&&(null===t||/number|range|text/.test(t))&&(i=Number(i),isNaN(i)&&(i=void 0)),i||0===i?e[n]=i:t===n&&"range"!==t&&(e[n]=!0)},attributeRules:function(t){var n,i,r={},s=e(t),o=t.getAttribute("type");for(n in e.validator.methods)"required"===n?(i=t.getAttribute(n),""===i&&(i=!0),i=!!i):i=s.attr(n),this.normalizeAttributeRule(r,o,n,i);return r.maxlength&&/-1|2147483647|524288/.test(r.maxlength)&&delete r.maxlength,r},dataRules:function(t){var n,i,r={},s=e(t),o=t.getAttribute("type");for(n in e.validator.methods)i=s.data("rule"+n.charAt(0).toUpperCase()+n.substring(1).toLowerCase()),this.normalizeAttributeRule(r,o,n,i);return r},staticRules:function(t){var n={},i=e.data(t.form,"validator");return i.settings.rules&&(n=e.validator.normalizeRule(i.settings.rules[t.name])||{}),n},normalizeRules:function(t,n){return e.each(t,function(i,r){if(!1===r)return void delete t[i];if(r.param||r.depends){var s=!0;switch(typeof r.depends){case"string":s=!!e(r.depends,n.form).length;break;case"function":s=r.depends.call(n,n)}s?t[i]=void 0===r.param||r.param:(e.data(n.form,"validator").resetElements(e(n)),delete t[i])}}),e.each(t,function(i,r){t[i]=e.isFunction(r)&&"normalizer"!==i?r(n):r}),e.each(["minlength","maxlength"],function(){t[this]&&(t[this]=Number(t[this]))}),e.each(["rangelength","range"],function(){var n;t[this]&&(e.isArray(t[this])?t[this]=[Number(t[this][0]),Number(t[this][1])]:"string"==typeof t[this]&&(n=t[this].replace(/[\[\]]/g,"").split(/[\s,]+/),t[this]=[Number(n[0]),Number(n[1])]))}),e.validator.autoCreateRanges&&(null!=t.min&&null!=t.max&&(t.range=[t.min,t.max],delete t.min,delete t.max),null!=t.minlength&&null!=t.maxlength&&(t.rangelength=[t.minlength,t.maxlength],delete t.minlength,delete t.maxlength)),t},normalizeRule:function(t){if("string"==typeof t){var n={};e.each(t.split(/\s/),function(){n[this]=!0}),t=n}return t},addMethod:function(t,n,i){e.validator.methods[t]=n,e.validator.messages[t]=void 0!==i?i:e.validator.messages[t],n.length<3&&e.validator.addClassRules(t,e.validator.normalizeRule(t))},methods:{required:function(t,n,i){if(!this.depend(i,n))return"dependency-mismatch";if("select"===n.nodeName.toLowerCase()){var r=e(n).val();return r&&r.length>0}return this.checkable(n)?this.getLength(t,n)>0:t.length>0},email:function(e,t){return this.optional(t)||/^[a-zA-Z0-9.!#$%&'*+\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/.test(e)},url:function(e,t){return this.optional(t)||/^(?:(?:(?:https?|ftp):)?\/\/)(?:\S+(?::\S*)?@)?(?:(?!(?:10|127)(?:\.\d{1,3}){3})(?!(?:169\.254|192\.168)(?:\.\d{1,3}){2})(?!172\.(?:1[6-9]|2\d|3[0-1])(?:\.\d{1,3}){2})(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[a-z\u00a1-\uffff0-9]-*)*[a-z\u00a1-\uffff0-9]+)(?:\.(?:[a-z\u00a1-\uffff0-9]-*)*[a-z\u00a1-\uffff0-9]+)*(?:\.(?:[a-z\u00a1-\uffff]{2,})).?)(?::\d{2,5})?(?:[\/?#]\S*)?$/i.test(e)},date:function(e,t){return this.optional(t)||!/Invalid|NaN/.test(new Date(e).toString())},dateISO:function(e,t){return this.optional(t)||/^\d{4}[\/\-](0?[1-9]|1[012])[\/\-](0?[1-9]|[12][0-9]|3[01])$/.test(e)},number:function(e,t){return this.optional(t)||/^(?:-?\d+|-?\d{1,3}(?:,\d{3})+)?(?:\.\d+)?$/.test(e)},digits:function(e,t){return this.optional(t)||/^\d+$/.test(e)},minlength:function(t,n,i){var r=e.isArray(t)?t.length:this.getLength(t,n);return this.optional(n)||r>=i},maxlength:function(t,n,i){var r=e.isArray(t)?t.length:this.getLength(t,n);return this.optional(n)||r<=i},rangelength:function(t,n,i){var r=e.isArray(t)?t.length:this.getLength(t,n);return this.optional(n)||r>=i[0]&&r<=i[1]},min:function(e,t,n){return this.optional(t)||e>=n},max:function(e,t,n){return this.optional(t)||e<=n},range:function(e,t,n){return this.optional(t)||e>=n[0]&&e<=n[1]},step:function(t,n,i){var r,s=e(n).attr("type"),o="Step attribute on input type "+s+" is not supported.",a=["text","number","range"],l=new RegExp("\\b"+s+"\\b"),u=s&&!l.test(a.join()),c=function(e){var t=(""+e).match(/(?:\.(\d+))?$/);return t&&t[1]?t[1].length:0},h=function(e){return Math.round(e*Math.pow(10,r))},d=!0;if(u)throw new Error(o);return r=c(i),(c(t)>r||h(t)%h(i)!=0)&&(d=!1),this.optional(n)||d},equalTo:function(t,n,i){var r=e(i);return this.settings.onfocusout&&r.not(".validate-equalTo-blur").length&&r.addClass("validate-equalTo-blur").on("blur.validate-equalTo",function(){e(n).valid()}),t===r.val()},remote:function(t,n,i,r){if(this.optional(n))return"dependency-mismatch";r="string"==typeof r&&r||"remote";var s,o,a,l=this.previousValue(n,r);return this.settings.messages[n.name]||(this.settings.messages[n.name]={}),l.originalMessage=l.originalMessage||this.settings.messages[n.name][r],this.settings.messages[n.name][r]=l.message,i="string"==typeof i&&{url:i}||i,a=e.param(e.extend({data:t},i.data)),l.old===a?l.valid:(l.old=a,s=this,this.startRequest(n),o={},o[n.name]=t,e.ajax(e.extend(!0,{mode:"abort",port:"validate"+n.name,dataType:"json",data:o,context:s.currentForm,success:function(e){var i,o,a,u=!0===e||"true"===e;s.settings.messages[n.name][r]=l.originalMessage,u?(a=s.formSubmitted,s.resetInternals(),s.toHide=s.errorsFor(n),s.formSubmitted=a,s.successList.push(n),s.invalid[n.name]=!1,s.showErrors()):(i={},o=e||s.defaultMessage(n,{method:r,parameters:t}),i[n.name]=l.message=o,s.invalid[n.name]=!0,s.showErrors(i)),l.valid=u,s.stopRequest(n,u)}},i)),"pending")}}});var t,n={};return e.ajaxPrefilter?e.ajaxPrefilter(function(e,t,i){var r=e.port;"abort"===e.mode&&(n[r]&&n[r].abort(),n[r]=i)}):(t=e.ajax,e.ajax=function(i){var r=("mode"in i?i:e.ajaxSettings).mode,s=("port"in i?i:e.ajaxSettings).port;return"abort"===r?(n[s]&&n[s].abort(),n[s]=t.apply(this,arguments),n[s]):t.apply(this,arguments)}),e}),function(){var e,t,n,i,r,s=function(e,t){return function(){return e.apply(t,arguments)}},o={}.hasOwnProperty,a=function(e,t){function n(){this.constructor=e}for(var i in t)o.call(t,i)&&(e[i]=t[i]);return n.prototype=t.prototype,e.prototype=new n,e.__super__=t.prototype,e};i=function(){function e(){this.options_index=0,this.parsed=[]}return e.prototype.add_node=function(e){return"OPTGROUP"===e.nodeName.toUpperCase()?this.add_group(e):this.add_option(e)},e.prototype.add_group=function(e){var t,n,i,r,s,o;for(t=this.parsed.length,this.parsed.push({array_index:t,group:!0,label:this.escapeExpression(e.label),title:e.title?e.title:void 0,children:0,disabled:e.disabled,classes:e.className}),s=e.childNodes,o=[],i=0,r=s.length;i<r;i++)n=s[i],o.push(this.add_option(n,t,e.disabled));return o},e.prototype.add_option=function(e,t,n){if("OPTION"===e.nodeName.toUpperCase())return""!==e.text?(null!=t&&(this.parsed[t].children+=1),this.parsed.push({array_index:this.parsed.length,options_index:this.options_index,value:e.value,text:e.text,html:e.innerHTML,title:e.title?e.title:void 0,selected:e.selected,disabled:!0===n?n:e.disabled,group_array_index:t,group_label:null!=t?this.parsed[t].label:null,classes:e.className,style:e.style.cssText})):this.parsed.push({array_index:this.parsed.length,options_index:this.options_index,empty:!0}),this.options_index+=1},e.prototype.escapeExpression=function(e){var t,n;return null==e||!1===e?"":/[\&\<\>\"\'\`]/.test(e)?(t={"<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#x27;","`":"&#x60;"},n=/&(?!\w+;)|[\<\>\"\'\`]/g,e.replace(n,function(e){return t[e]||"&amp;"})):e},e}(),i.select_to_array=function(e){var t,n,r,s,o;for(n=new i,o=e.childNodes,r=0,s=o.length;r<s;r++)t=o[r],n.add_node(t);return n.parsed},t=function(){function e(t,n){this.form_field=t,this.options=null!=n?n:{},this.label_click_handler=s(this.label_click_handler,this),e.browser_is_supported()&&(this.is_multiple=this.form_field.multiple,this.set_default_text(),this.set_default_values(),this.setup(),this.set_up_html(),this.register_observers(),this.on_ready())}return e.prototype.set_default_values=function(){var e=this;return this.click_test_action=function(t){return e.test_active_click(t)},this.activate_action=function(t){return e.activate_field(t)},this.active_field=!1,this.mouse_on_container=!1,this.results_showing=!1,this.result_highlighted=null,this.is_rtl=this.options.rtl||/\bchosen-rtl\b/.test(this.form_field.className),this.allow_single_deselect=null!=this.options.allow_single_deselect&&null!=this.form_field.options[0]&&""===this.form_field.options[0].text&&this.options.allow_single_deselect,this.disable_search_threshold=this.options.disable_search_threshold||0,this.disable_search=this.options.disable_search||!1,this.enable_split_word_search=null==this.options.enable_split_word_search||this.options.enable_split_word_search,this.group_search=null==this.options.group_search||this.options.group_search,this.search_contains=this.options.search_contains||!1,this.single_backstroke_delete=null==this.options.single_backstroke_delete||this.options.single_backstroke_delete,this.max_selected_options=this.options.max_selected_options||1/0,this.inherit_select_classes=this.options.inherit_select_classes||!1,this.display_selected_options=null==this.options.display_selected_options||this.options.display_selected_options,this.display_disabled_options=null==this.options.display_disabled_options||this.options.display_disabled_options,this.include_group_label_in_selected=this.options.include_group_label_in_selected||!1,this.max_shown_results=this.options.max_shown_results||Number.POSITIVE_INFINITY,this.case_sensitive_search=this.options.case_sensitive_search||!1,this.hide_results_on_select=null==this.options.hide_results_on_select||this.options.hide_results_on_select},e.prototype.set_default_text=function(){return this.form_field.getAttribute("data-placeholder")?this.default_text=this.form_field.getAttribute("data-placeholder"):this.is_multiple?this.default_text=this.options.placeholder_text_multiple||this.options.placeholder_text||e.default_multiple_text:this.default_text=this.options.placeholder_text_single||this.options.placeholder_text||e.default_single_text,this.default_text=this.escape_html(this.default_text),this.results_none_found=this.form_field.getAttribute("data-no_results_text")||this.options.no_results_text||e.default_no_result_text},e.prototype.choice_label=function(e){return this.include_group_label_in_selected&&null!=e.group_label?"<b class='group-name'>"+e.group_label+"</b>"+e.html:e.html},e.prototype.mouse_enter=function(){return this.mouse_on_container=!0},e.prototype.mouse_leave=function(){return this.mouse_on_container=!1},e.prototype.input_focus=function(e){var t=this;if(this.is_multiple){if(!this.active_field)return setTimeout(function(){return t.container_mousedown()},50)}else if(!this.active_field)return this.activate_field()},e.prototype.input_blur=function(e){var t=this;if(!this.mouse_on_container)return this.active_field=!1,setTimeout(function(){return t.blur_test()},100)},e.prototype.label_click_handler=function(e){return this.is_multiple?this.container_mousedown(e):this.activate_field()},e.prototype.results_option_build=function(e){var t,n,i,r,s,o,a;for(t="",r=0,a=this.results_data,s=0,o=a.length;s<o&&(n=a[s],i="",i=n.group?this.result_add_group(n):this.result_add_option(n),""!==i&&(r++,t+=i),(null!=e?e.first:void 0)&&(n.selected&&this.is_multiple?this.choice_build(n):n.selected&&!this.is_multiple&&this.single_set_selected_text(this.choice_label(n))),!(r>=this.max_shown_results));s++);return t},e.prototype.result_add_option=function(e){
var t,n;return e.search_match&&this.include_option_in_results(e)?(t=[],e.disabled||e.selected&&this.is_multiple||t.push("active-result"),!e.disabled||e.selected&&this.is_multiple||t.push("disabled-result"),e.selected&&t.push("result-selected"),null!=e.group_array_index&&t.push("group-option"),""!==e.classes&&t.push(e.classes),n=document.createElement("li"),n.className=t.join(" "),n.style.cssText=e.style,n.setAttribute("data-option-array-index",e.array_index),n.innerHTML=e.search_text,e.title&&(n.title=e.title),this.outerHTML(n)):""},e.prototype.result_add_group=function(e){var t,n;return(e.search_match||e.group_match)&&e.active_options>0?(t=[],t.push("group-result"),e.classes&&t.push(e.classes),n=document.createElement("li"),n.className=t.join(" "),n.innerHTML=e.search_text,e.title&&(n.title=e.title),this.outerHTML(n)):""},e.prototype.results_update_field=function(){if(this.set_default_text(),this.is_multiple||this.results_reset_cleanup(),this.result_clear_highlight(),this.results_build(),this.results_showing)return this.winnow_results()},e.prototype.reset_single_select_options=function(){var e,t,n,i,r;for(i=this.results_data,r=[],t=0,n=i.length;t<n;t++)e=i[t],e.selected?r.push(e.selected=!1):r.push(void 0);return r},e.prototype.results_toggle=function(){return this.results_showing?this.results_hide():this.results_show()},e.prototype.results_search=function(e){return this.results_showing?this.winnow_results():this.results_show()},e.prototype.winnow_results=function(){var e,t,n,i,r,s,o,a,l,u,c,h;for(this.no_results_clear(),r=0,o=this.get_search_text(),e=o.replace(/[-[\]{}()*+?.,\\^$|#\s]/g,"\\$&"),i=this.get_search_regex(e),t=this.get_highlight_regex(e),h=this.results_data,u=0,c=h.length;u<c;u++)n=h[u],n.search_match=!1,s=null,this.include_option_in_results(n)&&(n.group&&(n.group_match=!1,n.active_options=0),null!=n.group_array_index&&this.results_data[n.group_array_index]&&(s=this.results_data[n.group_array_index],0===s.active_options&&s.search_match&&(r+=1),s.active_options+=1),n.search_text=n.group?n.label:n.html,n.group&&!this.group_search||(n.search_match=this.search_string_match(n.search_text,i),n.search_match&&!n.group&&(r+=1),n.search_match?(o.length&&(a=n.search_text.search(t),l=n.search_text.substr(0,a+o.length)+"</em>"+n.search_text.substr(a+o.length),n.search_text=l.substr(0,a)+"<em>"+l.substr(a)),null!=s&&(s.group_match=!0)):null!=n.group_array_index&&this.results_data[n.group_array_index].search_match&&(n.search_match=!0)));return this.result_clear_highlight(),r<1&&o.length?(this.update_results_content(""),this.no_results(o)):(this.update_results_content(this.results_option_build()),this.winnow_results_set_highlight())},e.prototype.get_search_regex=function(e){var t,n;return t=this.search_contains?"":"^",n=this.case_sensitive_search?"":"i",new RegExp(t+e,n)},e.prototype.get_highlight_regex=function(e){var t,n;return t=this.search_contains?"":"\\b",n=this.case_sensitive_search?"":"i",new RegExp(t+e,n)},e.prototype.search_string_match=function(e,t){var n,i,r,s;if(t.test(e))return!0;if(this.enable_split_word_search&&(e.indexOf(" ")>=0||0===e.indexOf("["))&&(i=e.replace(/\[|\]/g,"").split(" "),i.length))for(r=0,s=i.length;r<s;r++)if(n=i[r],t.test(n))return!0},e.prototype.choices_count=function(){var e,t,n,i;if(null!=this.selected_option_count)return this.selected_option_count;for(this.selected_option_count=0,i=this.form_field.options,t=0,n=i.length;t<n;t++)e=i[t],e.selected&&(this.selected_option_count+=1);return this.selected_option_count},e.prototype.choices_click=function(e){if(e.preventDefault(),this.activate_field(),!this.results_showing&&!this.is_disabled)return this.results_show()},e.prototype.keydown_checker=function(e){var t,n;switch(t=null!=(n=e.which)?n:e.keyCode,this.search_field_scale(),8!==t&&this.pending_backstroke&&this.clear_backstroke(),t){case 8:this.backstroke_length=this.get_search_field_value().length;break;case 9:this.results_showing&&!this.is_multiple&&this.result_select(e),this.mouse_on_container=!1;break;case 13:case 27:this.results_showing&&e.preventDefault();break;case 32:this.disable_search&&e.preventDefault();break;case 38:e.preventDefault(),this.keyup_arrow();break;case 40:e.preventDefault(),this.keydown_arrow()}},e.prototype.keyup_checker=function(e){var t,n;switch(t=null!=(n=e.which)?n:e.keyCode,this.search_field_scale(),t){case 8:this.is_multiple&&this.backstroke_length<1&&this.choices_count()>0?this.keydown_backstroke():this.pending_backstroke||(this.result_clear_highlight(),this.results_search());break;case 13:e.preventDefault(),this.results_showing&&this.result_select(e);break;case 27:this.results_showing&&this.results_hide();break;case 9:case 16:case 17:case 18:case 38:case 40:case 91:break;default:this.results_search()}},e.prototype.clipboard_event_checker=function(e){var t=this;if(!this.is_disabled)return setTimeout(function(){return t.results_search()},50)},e.prototype.container_width=function(){return null!=this.options.width?this.options.width:this.form_field.offsetWidth+"px"},e.prototype.include_option_in_results=function(e){return!(this.is_multiple&&!this.display_selected_options&&e.selected)&&(!(!this.display_disabled_options&&e.disabled)&&!e.empty)},e.prototype.search_results_touchstart=function(e){return this.touch_started=!0,this.search_results_mouseover(e)},e.prototype.search_results_touchmove=function(e){return this.touch_started=!1,this.search_results_mouseout(e)},e.prototype.search_results_touchend=function(e){if(this.touch_started)return this.search_results_mouseup(e)},e.prototype.outerHTML=function(e){var t;return e.outerHTML?e.outerHTML:(t=document.createElement("div"),t.appendChild(e),t.innerHTML)},e.prototype.get_single_html=function(){return'<a class="chosen-single chosen-default">\n  <span>'+this.default_text+'</span>\n  <div><b></b></div>\n</a>\n<div class="chosen-drop">\n  <div class="chosen-search">\n    <input class="chosen-search-input" type="text" autocomplete="off" />\n  </div>\n  <ul class="chosen-results"></ul>\n</div>'},e.prototype.get_multi_html=function(){return'<ul class="chosen-choices">\n  <li class="search-field">\n    <input class="chosen-search-input" type="text" autocomplete="off" value="'+this.default_text+'" />\n  </li>\n</ul>\n<div class="chosen-drop">\n  <ul class="chosen-results"></ul>\n</div>'},e.prototype.get_no_results_html=function(e){return'<li class="no-results">\n  '+this.results_none_found+" <span>"+e+"</span>\n</li>"},e.browser_is_supported=function(){return"Microsoft Internet Explorer"===window.navigator.appName?document.documentMode>=8:!(/iP(od|hone)/i.test(window.navigator.userAgent)||/IEMobile/i.test(window.navigator.userAgent)||/Windows Phone/i.test(window.navigator.userAgent)||/BlackBerry/i.test(window.navigator.userAgent)||/BB10/i.test(window.navigator.userAgent)||/Android.*Mobile/i.test(window.navigator.userAgent))},e.default_multiple_text="Select Some Options",e.default_single_text="Select an Option",e.default_no_result_text="No results match",e}(),e=jQuery,e.fn.extend({chosen:function(i){return t.browser_is_supported()?this.each(function(t){var r,s;if(r=e(this),s=r.data("chosen"),"destroy"===i)return void(s instanceof n&&s.destroy());s instanceof n||r.data("chosen",new n(this,i))}):this}}),n=function(t){function n(){return r=n.__super__.constructor.apply(this,arguments)}return a(n,t),n.prototype.setup=function(){return this.form_field_jq=e(this.form_field),this.current_selectedIndex=this.form_field.selectedIndex},n.prototype.set_up_html=function(){var t,n;return t=["chosen-container"],t.push("chosen-container-"+(this.is_multiple?"multi":"single")),this.inherit_select_classes&&this.form_field.className&&t.push(this.form_field.className),this.is_rtl&&t.push("chosen-rtl"),n={class:t.join(" "),title:this.form_field.title},this.form_field.id.length&&(n.id=this.form_field.id.replace(/[^\w]/g,"_")+"_chosen"),this.container=e("<div />",n),this.container.width(this.container_width()),this.is_multiple?this.container.html(this.get_multi_html()):this.container.html(this.get_single_html()),this.form_field_jq.hide().after(this.container),this.dropdown=this.container.find("div.chosen-drop").first(),this.search_field=this.container.find("input").first(),this.search_results=this.container.find("ul.chosen-results").first(),this.search_field_scale(),this.search_no_results=this.container.find("li.no-results").first(),this.is_multiple?(this.search_choices=this.container.find("ul.chosen-choices").first(),this.search_container=this.container.find("li.search-field").first()):(this.search_container=this.container.find("div.chosen-search").first(),this.selected_item=this.container.find(".chosen-single").first()),this.results_build(),this.set_tab_index(),this.set_label_behavior()},n.prototype.on_ready=function(){return this.form_field_jq.trigger("chosen:ready",{chosen:this})},n.prototype.register_observers=function(){var e=this;return this.container.bind("touchstart.chosen",function(t){e.container_mousedown(t)}),this.container.bind("touchend.chosen",function(t){e.container_mouseup(t)}),this.container.bind("mousedown.chosen",function(t){e.container_mousedown(t)}),this.container.bind("mouseup.chosen",function(t){e.container_mouseup(t)}),this.container.bind("mouseenter.chosen",function(t){e.mouse_enter(t)}),this.container.bind("mouseleave.chosen",function(t){e.mouse_leave(t)}),this.search_results.bind("mouseup.chosen",function(t){e.search_results_mouseup(t)}),this.search_results.bind("mouseover.chosen",function(t){e.search_results_mouseover(t)}),this.search_results.bind("mouseout.chosen",function(t){e.search_results_mouseout(t)}),this.search_results.bind("mousewheel.chosen DOMMouseScroll.chosen",function(t){e.search_results_mousewheel(t)}),this.search_results.bind("touchstart.chosen",function(t){e.search_results_touchstart(t)}),this.search_results.bind("touchmove.chosen",function(t){e.search_results_touchmove(t)}),this.search_results.bind("touchend.chosen",function(t){e.search_results_touchend(t)}),this.form_field_jq.bind("chosen:updated.chosen",function(t){e.results_update_field(t)}),this.form_field_jq.bind("chosen:activate.chosen",function(t){e.activate_field(t)}),this.form_field_jq.bind("chosen:open.chosen",function(t){e.container_mousedown(t)}),this.form_field_jq.bind("chosen:close.chosen",function(t){e.close_field(t)}),this.search_field.bind("blur.chosen",function(t){e.input_blur(t)}),this.search_field.bind("keyup.chosen",function(t){e.keyup_checker(t)}),this.search_field.bind("keydown.chosen",function(t){e.keydown_checker(t)}),this.search_field.bind("focus.chosen",function(t){e.input_focus(t)}),this.search_field.bind("cut.chosen",function(t){e.clipboard_event_checker(t)}),this.search_field.bind("paste.chosen",function(t){e.clipboard_event_checker(t)}),this.is_multiple?this.search_choices.bind("click.chosen",function(t){e.choices_click(t)}):this.container.bind("click.chosen",function(e){e.preventDefault()})},n.prototype.destroy=function(){return e(this.container[0].ownerDocument).unbind("click.chosen",this.click_test_action),this.form_field_label.length>0&&this.form_field_label.unbind("click.chosen"),this.search_field[0].tabIndex&&(this.form_field_jq[0].tabIndex=this.search_field[0].tabIndex),this.container.remove(),this.form_field_jq.removeData("chosen"),this.form_field_jq.show()},n.prototype.search_field_disabled=function(){return this.is_disabled=this.form_field.disabled||this.form_field_jq.parents("fieldset").is(":disabled"),this.container.toggleClass("chosen-disabled",this.is_disabled),this.search_field[0].disabled=this.is_disabled,this.is_multiple||this.selected_item.unbind("focus.chosen",this.activate_field),this.is_disabled?this.close_field():this.is_multiple?void 0:this.selected_item.bind("focus.chosen",this.activate_field)},n.prototype.container_mousedown=function(t){var n;if(!this.is_disabled)return!t||"mousedown"!==(n=t.type)&&"touchstart"!==n||this.results_showing||t.preventDefault(),null!=t&&e(t.target).hasClass("search-choice-close")?void 0:(this.active_field?this.is_multiple||!t||e(t.target)[0]!==this.selected_item[0]&&!e(t.target).parents("a.chosen-single").length||(t.preventDefault(),this.results_toggle()):(this.is_multiple&&this.search_field.val(""),e(this.container[0].ownerDocument).bind("click.chosen",this.click_test_action),this.results_show()),this.activate_field())},n.prototype.container_mouseup=function(e){if("ABBR"===e.target.nodeName&&!this.is_disabled)return this.results_reset(e)},n.prototype.search_results_mousewheel=function(e){var t;if(e.originalEvent&&(t=e.originalEvent.deltaY||-e.originalEvent.wheelDelta||e.originalEvent.detail),null!=t)return e.preventDefault(),"DOMMouseScroll"===e.type&&(t*=40),this.search_results.scrollTop(t+this.search_results.scrollTop())},n.prototype.blur_test=function(e){if(!this.active_field&&this.container.hasClass("chosen-container-active"))return this.close_field()},n.prototype.close_field=function(){return e(this.container[0].ownerDocument).unbind("click.chosen",this.click_test_action),this.active_field=!1,this.results_hide(),this.container.removeClass("chosen-container-active"),this.clear_backstroke(),this.show_search_field_default(),this.search_field_scale(),this.search_field.blur()},n.prototype.activate_field=function(){if(!this.is_disabled)return this.container.addClass("chosen-container-active"),this.active_field=!0,this.search_field.val(this.search_field.val()),this.search_field.focus()},n.prototype.test_active_click=function(t){var n;return n=e(t.target).closest(".chosen-container"),n.length&&this.container[0]===n[0]?this.active_field=!0:this.close_field()},n.prototype.results_build=function(){return this.parsing=!0,this.selected_option_count=null,this.results_data=i.select_to_array(this.form_field),this.is_multiple?this.search_choices.find("li.search-choice").remove():this.is_multiple||(this.single_set_selected_text(),this.disable_search||this.form_field.options.length<=this.disable_search_threshold?(this.search_field[0].readOnly=!0,this.container.addClass("chosen-container-single-nosearch")):(this.search_field[0].readOnly=!1,this.container.removeClass("chosen-container-single-nosearch"))),this.update_results_content(this.results_option_build({first:!0})),this.search_field_disabled(),this.show_search_field_default(),this.search_field_scale(),this.parsing=!1},n.prototype.result_do_highlight=function(e){var t,n,i,r,s;if(e.length){if(this.result_clear_highlight(),this.result_highlight=e,this.result_highlight.addClass("highlighted"),i=parseInt(this.search_results.css("maxHeight"),10),s=this.search_results.scrollTop(),r=i+s,n=this.result_highlight.position().top+this.search_results.scrollTop(),(t=n+this.result_highlight.outerHeight())>=r)return this.search_results.scrollTop(t-i>0?t-i:0);if(n<s)return this.search_results.scrollTop(n)}},n.prototype.result_clear_highlight=function(){return this.result_highlight&&this.result_highlight.removeClass("highlighted"),this.result_highlight=null},n.prototype.results_show=function(){return this.is_multiple&&this.max_selected_options<=this.choices_count()?(this.form_field_jq.trigger("chosen:maxselected",{chosen:this}),!1):(this.container.addClass("chosen-with-drop"),this.results_showing=!0,this.search_field.focus(),this.search_field.val(this.get_search_field_value()),this.winnow_results(),this.form_field_jq.trigger("chosen:showing_dropdown",{chosen:this}))},n.prototype.update_results_content=function(e){return this.search_results.html(e)},n.prototype.results_hide=function(){return this.results_showing&&(this.result_clear_highlight(),this.container.removeClass("chosen-with-drop"),this.form_field_jq.trigger("chosen:hiding_dropdown",{chosen:this})),this.results_showing=!1},n.prototype.set_tab_index=function(e){var t;if(this.form_field.tabIndex)return t=this.form_field.tabIndex,this.form_field.tabIndex=-1,this.search_field[0].tabIndex=t},n.prototype.set_label_behavior=function(){if(this.form_field_label=this.form_field_jq.parents("label"),!this.form_field_label.length&&this.form_field.id.length&&(this.form_field_label=e("label[for='"+this.form_field.id+"']")),this.form_field_label.length>0)return this.form_field_label.bind("click.chosen",this.label_click_handler)},n.prototype.show_search_field_default=function(){return this.is_multiple&&this.choices_count()<1&&!this.active_field?(this.search_field.val(this.default_text),this.search_field.addClass("default")):(this.search_field.val(""),this.search_field.removeClass("default"))},n.prototype.search_results_mouseup=function(t){var n;if(n=e(t.target).hasClass("active-result")?e(t.target):e(t.target).parents(".active-result").first(),n.length)return this.result_highlight=n,this.result_select(t),this.search_field.focus()},n.prototype.search_results_mouseover=function(t){var n;if(n=e(t.target).hasClass("active-result")?e(t.target):e(t.target).parents(".active-result").first())return this.result_do_highlight(n)},n.prototype.search_results_mouseout=function(t){if(e(t.target).hasClass("active-result"))return this.result_clear_highlight()},n.prototype.choice_build=function(t){var n,i,r=this;return n=e("<li />",{class:"search-choice"}).html("<span>"+this.choice_label(t)+"</span>"),t.disabled?n.addClass("search-choice-disabled"):(i=e("<a />",{class:"search-choice-close","data-option-array-index":t.array_index}),i.bind("click.chosen",function(e){return r.choice_destroy_link_click(e)}),n.append(i)),this.search_container.before(n)},n.prototype.choice_destroy_link_click=function(t){if(t.preventDefault(),t.stopPropagation(),!this.is_disabled)return this.choice_destroy(e(t.target))},n.prototype.choice_destroy=function(e){if(this.result_deselect(e[0].getAttribute("data-option-array-index")))return this.active_field?this.search_field.focus():this.show_search_field_default(),this.is_multiple&&this.choices_count()>0&&this.get_search_field_value().length<1&&this.results_hide(),e.parents("li").first().remove(),this.search_field_scale()},n.prototype.results_reset=function(){if(this.reset_single_select_options(),this.form_field.options[0].selected=!0,this.single_set_selected_text(),this.show_search_field_default(),this.results_reset_cleanup(),this.trigger_form_field_change(),this.active_field)return this.results_hide()},n.prototype.results_reset_cleanup=function(){return this.current_selectedIndex=this.form_field.selectedIndex,this.selected_item.find("abbr").remove()},n.prototype.result_select=function(e){var t,n;if(this.result_highlight)return t=this.result_highlight,this.result_clear_highlight(),this.is_multiple&&this.max_selected_options<=this.choices_count()?(this.form_field_jq.trigger("chosen:maxselected",{chosen:this}),!1):(this.is_multiple?t.removeClass("active-result"):this.reset_single_select_options(),t.addClass("result-selected"),n=this.results_data[t[0].getAttribute("data-option-array-index")],n.selected=!0,this.form_field.options[n.options_index].selected=!0,this.selected_option_count=null,this.is_multiple?this.choice_build(n):this.single_set_selected_text(this.choice_label(n)),this.is_multiple&&(!this.hide_results_on_select||e.metaKey||e.ctrlKey)||(this.results_hide(),this.show_search_field_default()),(this.is_multiple||this.form_field.selectedIndex!==this.current_selectedIndex)&&this.trigger_form_field_change({selected:this.form_field.options[n.options_index].value}),this.current_selectedIndex=this.form_field.selectedIndex,e.preventDefault(),this.search_field_scale())},n.prototype.single_set_selected_text=function(e){return null==e&&(e=this.default_text),e===this.default_text?this.selected_item.addClass("chosen-default"):(this.single_deselect_control_build(),this.selected_item.removeClass("chosen-default")),this.selected_item.find("span").html(e)},n.prototype.result_deselect=function(e){var t;return t=this.results_data[e],!this.form_field.options[t.options_index].disabled&&(t.selected=!1,this.form_field.options[t.options_index].selected=!1,this.selected_option_count=null,this.result_clear_highlight(),this.results_showing&&this.winnow_results(),this.trigger_form_field_change({deselected:this.form_field.options[t.options_index].value}),this.search_field_scale(),!0)},n.prototype.single_deselect_control_build=function(){if(this.allow_single_deselect)return this.selected_item.find("abbr").length||this.selected_item.find("span").first().after('<abbr class="search-choice-close"></abbr>'),this.selected_item.addClass("chosen-single-with-deselect")},n.prototype.get_search_field_value=function(){return this.search_field.val()},n.prototype.get_search_text=function(){return this.escape_html(e.trim(this.get_search_field_value()))},n.prototype.escape_html=function(t){return e("<div/>").text(t).html()},n.prototype.winnow_results_set_highlight=function(){var e,t;if(t=this.is_multiple?[]:this.search_results.find(".result-selected.active-result"),null!=(e=t.length?t.first():this.search_results.find(".active-result").first()))return this.result_do_highlight(e)},n.prototype.no_results=function(e){var t;return t=this.get_no_results_html(e),this.search_results.append(t),this.form_field_jq.trigger("chosen:no_results",{chosen:this})},n.prototype.no_results_clear=function(){return this.search_results.find(".no-results").remove()},n.prototype.keydown_arrow=function(){var e;return this.results_showing&&this.result_highlight?(e=this.result_highlight.nextAll("li.active-result").first())?this.result_do_highlight(e):void 0:this.results_show()},n.prototype.keyup_arrow=function(){var e;return this.results_showing||this.is_multiple?this.result_highlight?(e=this.result_highlight.prevAll("li.active-result"),e.length?this.result_do_highlight(e.first()):(this.choices_count()>0&&this.results_hide(),this.result_clear_highlight())):void 0:this.results_show()},n.prototype.keydown_backstroke=function(){var e;return this.pending_backstroke?(this.choice_destroy(this.pending_backstroke.find("a").first()),this.clear_backstroke()):(e=this.search_container.siblings("li.search-choice").last(),e.length&&!e.hasClass("search-choice-disabled")?(this.pending_backstroke=e,this.single_backstroke_delete?this.keydown_backstroke():this.pending_backstroke.addClass("search-choice-focus")):void 0)},n.prototype.clear_backstroke=function(){return this.pending_backstroke&&this.pending_backstroke.removeClass("search-choice-focus"),this.pending_backstroke=null},n.prototype.search_field_scale=function(){var t,n,i,r,s,o,a,l;if(this.is_multiple){for(r={position:"absolute",left:"-1000px",top:"-1000px",display:"none",whiteSpace:"pre"},s=["fontSize","fontStyle","fontWeight","fontFamily","lineHeight","textTransform","letterSpacing"],a=0,l=s.length;a<l;a++)i=s[a],r[i]=this.search_field.css(i);return n=e("<div />").css(r),n.text(this.get_search_field_value()),e("body").append(n),o=n.width()+25,n.remove(),t=this.container.outerWidth(),o=Math.min(t-10,o),this.search_field.width(o)}},n.prototype.trigger_form_field_change=function(e){return this.form_field_jq.trigger("input",e),this.form_field_jq.trigger("change",e)},n}(t)}.call(this),function(e){e.fn.actionConfirm=function(t){this.each(function(){var t=e(this).data("action-confirm");e(this).click(function(e){if(!confirm(t))return!1})})}}(jQuery),function(e){e.fn.fileInput=function(){return this.each(function(){var t=e(this),n=t.find(".js-file-input-field"),i=(t.find(".js-file-input-link"),t.find(".js-file-input-photo")),r=t.find(".js-file-input-name"),s=t.find(".js-file-input-del"),o="";o=n.val()?"is-filled":"is-empty",t.addClass(o),n.hover(function(){t.addClass("is-hover")},function(){t.removeClass("is-hover")}),n.on("change",function(){var n=e(this).val(),s=/image.*/,o=e(this)[0].files[0];if(n?(r.html(n),t.addClass("is-filled").removeClass("is-empty")):(r.html(""),t.removeClass("is-filled").addClass("is-empty")),o&&o.type.match(s)){t.addClass("is-image");var a=new FileReader;a.onload=function(e){i.html("");var t=new Image;t.src=a.result,i[0].appendChild(t)},a.readAsDataURL(o)}else t.removeClass("is-image")}),s.on("click",function(){return n.val(""),n.trigger("change"),!1}),n.trigger("change")}),this}}(jQuery),function(e){e.fn.maskedinput=function(){this.each(function(){var t=e(this).data("masked-input"),n=e(this).data("masked-input-placeholder"),i=e(this).is("[data-masked-input-clearifnotmatch]");e(this).mask(t,{placeholder:n,clearIfNotMatch:i})})}}(jQuery),function(e){e.fn.textCounter=function(t){this.each(function(t,n){function i(){var e=r.val().length,t=s-e;o.html(t)}var r=e(n),s=r.attr("maxlength"),o=e(r.data("text-count-block"));r.keyup(function(){i()}),i()})}}(jQuery),$(document).ready(function(){$("[data-masked-input]").maskedinput(),$("[data-text-count]").textCounter(),$("[data-action-confirm]").actionConfirm(),$("#form-company-name").on("change",function(){var e=$(this).val();return e&&(window.location=e),!1}),$(".js-form-status").on("change",function(){var e=$(this).val();$(".js-member-status").removeClass("active"),e.forEach(function(e){$(".js-member-status-"+e).length&&$(".js-member-status-"+e).addClass("active")})}),$("[data-member-edit]").click(function(){var e=$($(this).data("member-edit")),t=$(this).closest("tr");return t.hasClass("active")?(t.removeClass("active"),e.removeClass("active")):($(".members-table-row").removeClass("active"),t.addClass("active"),$(".js-members-table-row-edit").removeClass("active"),e.addClass("active"),setTimeout(function(){$("html, body").animate({scrollTop:e.offset().top-90},500)},600)),!1}),$(".js-chosen-select").chosen({no_results_text:"Ничего не найдено"}),$(".js-file-input").fileInput()}),jQuery.trumbowyg={langs:{en:{viewHTML:"View HTML",undo:"Undo",redo:"Redo",formatting:"Formatting",p:"Paragraph",blockquote:"Quote",code:"Code",header:"Header",bold:"Bold",italic:"Italic",strikethrough:"Stroke",underline:"Underline",strong:"Strong",em:"Emphasis",del:"Deleted",superscript:"Superscript",subscript:"Subscript",unorderedList:"Unordered list",orderedList:"Ordered list",insertImage:"Insert Image",link:"Link",createLink:"Insert link",unlink:"Remove link",justifyLeft:"Align Left",justifyCenter:"Align Center",justifyRight:"Align Right",justifyFull:"Align Justify",horizontalRule:"Insert horizontal rule",removeformat:"Remove format",fullscreen:"Fullscreen",close:"Close",submit:"Confirm",reset:"Cancel",required:"Required",description:"Description",title:"Title",text:"Text",target:"Target",width:"Width"}},plugins:{},svgPath:null,hideButtonTexts:null},Object.defineProperty(jQuery.trumbowyg,"defaultOptions",{value:{lang:"en",fixedBtnPane:!1,fixedFullWidth:!1,autogrow:!1,autogrowOnEnter:!1,imageWidthModalEdit:!1,prefix:"trumbowyg-",semantic:!0,resetCss:!1,removeformatPasted:!1,tagsToRemove:[],btns:[["viewHTML"],["undo","redo"],["formatting"],["strong","em","del"],["superscript","subscript"],["link"],["insertImage"],["justifyLeft","justifyCenter","justifyRight","justifyFull"],["unorderedList","orderedList"],["horizontalRule"],["removeformat"],["fullscreen"]],btnsDef:{},inlineElementsSelector:"a,abbr,acronym,b,caption,cite,code,col,dfn,dir,dt,dd,em,font,hr,i,kbd,li,q,span,strikeout,strong,sub,sup,u",pasteHandlers:[],plugins:{},urlProtocol:!1,minimalLinks:!1},writable:!1,enumerable:!0,configurable:!1}),function(e,t,n,i){"use strict";i.fn.trumbowyg=function(e,t){if(e===Object(e)||!e)return this.each(function(){i(this).data("trumbowyg")||i(this).data("trumbowyg",new r(this,e))});if(1===this.length)try{var n=i(this).data("trumbowyg");switch(e){case"execCmd":return n.execCmd(t.cmd,t.param,t.forceCss);case"openModal":return n.openModal(t.title,t.content);case"closeModal":return n.closeModal();case"openModalInsert":return n.openModalInsert(t.title,t.fields,t.callback);case"saveRange":return n.saveRange();case"getRange":return n.range;case"getRangeText":return n.getRangeText();case"restoreRange":return n.restoreRange();case"enable":return n.setDisabled(!1);case"disable":return n.setDisabled(!0);case"toggle":return n.toggle();case"destroy":return n.destroy();case"empty":return n.empty();case"html":return n.html(t)}}catch(e){}return!1};var r=function(r,s){var o=this,a=i.trumbowyg;o.doc=r.ownerDocument||n,o.$ta=i(r),o.$c=i(r),s=s||{},null!=s.lang||null!=a.langs[s.lang]?o.lang=i.extend(!0,{},a.langs.en,a.langs[s.lang]):o.lang=a.langs.en,o.hideButtonTexts=null!=a.hideButtonTexts?a.hideButtonTexts:s.hideButtonTexts;var l=null!=a.svgPath?a.svgPath:s.svgPath;if(o.hasSvg=!1!==l,o.svgPath=o.doc.querySelector("base")?t.location.href.split("#")[0]:"",0===i("#trumbowyg-icons",o.doc).length&&!1!==l){if(null==l){for(var u=n.getElementsByTagName("script"),c=0;c<u.length;c+=1){var h=u[c].src,d=h.match("trumbowyg(.min)?.js");null!=d&&(l=h.substring(0,h.indexOf(d[0]))+"ui/icons.svg")}null==l&&console.warn("You must define svgPath: https://goo.gl/CfTY9U")}var f=o.doc.createElement("div");f.id="trumbowyg-icons",o.doc.body.insertBefore(f,o.doc.body.childNodes[0]),i.ajax({async:!0,type:"GET",contentType:"application/x-www-form-urlencoded; charset=UTF-8",dataType:"xml",crossDomain:!0,url:l,data:null,beforeSend:null,complete:null,success:function(e){f.innerHTML=(new XMLSerializer).serializeToString(e.documentElement)}})}var p=o.lang.header,g=function(){return(t.chrome||t.Intl&&Intl.v8BreakIterator)&&"CSS"in t};o.btnsDef={viewHTML:{fn:"toggle"},undo:{isSupported:g,key:"Z"},redo:{isSupported:g,key:"Y"},p:{fn:"formatBlock"},blockquote:{fn:"formatBlock"},h1:{fn:"formatBlock",title:p+" 1"},h2:{fn:"formatBlock",title:p+" 2"},h3:{fn:"formatBlock",title:p+" 3"},h4:{fn:"formatBlock",title:p+" 4"},subscript:{tag:"sub"},superscript:{tag:"sup"},bold:{key:"B",tag:"b"},italic:{key:"I",tag:"i"},underline:{tag:"u"},strikethrough:{tag:"strike"},strong:{fn:"bold",key:"B"},em:{fn:"italic",key:"I"},del:{fn:"strikethrough"},createLink:{key:"K",tag:"a"},unlink:{},insertImage:{},justifyLeft:{tag:"left",forceCss:!0},justifyCenter:{tag:"center",forceCss:!0},justifyRight:{tag:"right",forceCss:!0},justifyFull:{tag:"justify",forceCss:!0},unorderedList:{fn:"insertUnorderedList",tag:"ul"},orderedList:{fn:"insertOrderedList",tag:"ol"},horizontalRule:{fn:"insertHorizontalRule"},removeformat:{},fullscreen:{class:"trumbowyg-not-disable"},close:{fn:"destroy",class:"trumbowyg-not-disable"},formatting:{dropdown:["p","blockquote","h1","h2","h3","h4"],ico:"p"},link:{dropdown:["createLink","unlink"]}},o.o=i.extend(!0,{},a.defaultOptions,s),o.o.hasOwnProperty("imgDblClickHandler")||(o.o.imgDblClickHandler=o.getDefaultImgDblClickHandler()),o.urlPrefix=o.setupUrlPrefix(),o.disabled=o.o.disabled||"TEXTAREA"===r.nodeName&&r.disabled,s.btns?o.o.btns=s.btns:o.o.semantic||(o.o.btns[3]=["bold","italic","underline","strikethrough"]),i.each(o.o.btnsDef,function(e,t){o.addBtnDef(e,t)}),o.eventNamespace="trumbowyg-event",o.keys=[],o.tagToButton={},o.tagHandlers=[],o.pasteHandlers=[].concat(o.o.pasteHandlers),o.isIE=-1!==e.userAgent.indexOf("MSIE")||-1!==e.appVersion.indexOf("Trident/"),o.init()};r.prototype={DEFAULT_SEMANTIC_MAP:{b:"strong",i:"em",s:"del",strike:"del",div:"p"},init:function(){var e=this;e.height=e.$ta.height(),e.initPlugins();try{e.doc.execCommand("enableObjectResizing",!1,!1),e.doc.execCommand("defaultParagraphSeparator",!1,"p")}catch(e){}e.buildEditor(),e.buildBtnPane(),e.fixedBtnPaneEvents(),e.buildOverlay(),setTimeout(function(){e.disabled&&e.setDisabled(!0),e.$c.trigger("tbwinit")})},addBtnDef:function(e,t){this.btnsDef[e]=t},setupUrlPrefix:function(){var e=this.o.urlProtocol;if(e)return"string"!=typeof e?"https://":/:\/\/$/.test(e)?e:e+"://"},buildEditor:function(){var e=this,n=e.o.prefix,r="";e.$box=i("<div/>",{class:n+"box "+n+"editor-visible "+n+e.o.lang+" trumbowyg"}),e.isTextarea=e.$ta.is("textarea"),e.isTextarea?(r=e.$ta.val(),e.$ed=i("<div/>"),e.$box.insertAfter(e.$ta).append(e.$ed,e.$ta)):(e.$ed=e.$ta,r=e.$ed.html(),e.$ta=i("<textarea/>",{name:e.$ta.attr("id"),height:e.height}).val(r),e.$box.insertAfter(e.$ed).append(e.$ta,e.$ed),e.syncCode()),e.$ta.addClass(n+"textarea").attr("tabindex",-1),e.$ed.addClass(n+"editor").attr({contenteditable:!0,dir:e.lang._dir||"ltr"}).html(r),e.o.tabindex&&e.$ed.attr("tabindex",e.o.tabindex),e.$c.is("[placeholder]")&&e.$ed.attr("placeholder",e.$c.attr("placeholder")),
e.$c.is("[spellcheck]")&&e.$ed.attr("spellcheck",e.$c.attr("spellcheck")),e.o.resetCss&&e.$ed.addClass(n+"reset-css"),e.o.autogrow||e.$ta.add(e.$ed).css({height:e.height}),e.semanticCode(),e.o.autogrowOnEnter&&e.$ed.addClass(n+"autogrow-on-enter");var s,o=!1,a=!1;e.$ed.on("dblclick","img",e.o.imgDblClickHandler).on("keydown",function(t){if((t.ctrlKey||t.metaKey)&&!t.altKey){o=!0;var n=e.keys[String.fromCharCode(t.which).toUpperCase()];try{return e.execCmd(n.fn,n.param),!1}catch(e){}}}).on("compositionstart compositionupdate",function(){a=!0}).on("keyup compositionend",function(t){if("compositionend"===t.type)a=!1;else if(a)return;var n=t.which;if(!(n>=37&&n<=40)){if(!t.ctrlKey&&!t.metaKey||89!==n&&90!==n)if(o||17===n)void 0===t.which&&e.semanticCode(!1,!1,!0);else{var i=!e.isIE||"compositionend"===t.type;e.semanticCode(!1,i&&13===n),e.$c.trigger("tbwchange")}else e.$c.trigger("tbwchange");setTimeout(function(){o=!1},50)}}).on("mouseup keydown keyup",function(t){(!t.ctrlKey&&!t.metaKey||t.altKey)&&setTimeout(function(){o=!1},50),clearTimeout(s),s=setTimeout(function(){e.updateButtonPaneStatus()},50)}).on("focus blur",function(t){if(e.$c.trigger("tbw"+t.type),"blur"===t.type&&i("."+n+"active-button",e.$btnPane).removeClass(n+"active-button "+n+"active"),e.o.autogrowOnEnter){if(e.autogrowOnEnterDontClose)return;"focus"===t.type?(e.autogrowOnEnterWasFocused=!0,e.autogrowEditorOnEnter()):e.o.autogrow||(e.$ed.css({height:e.$ed.css("min-height")}),e.$c.trigger("tbwresize"))}}).on("cut",function(){setTimeout(function(){e.semanticCode(!1,!0),e.$c.trigger("tbwchange")},0)}).on("paste",function(n){if(e.o.removeformatPasted){n.preventDefault(),t.getSelection&&t.getSelection().deleteFromDocument&&t.getSelection().deleteFromDocument();try{var r=t.clipboardData.getData("Text");try{e.doc.selection.createRange().pasteHTML(r)}catch(t){e.doc.getSelection().getRangeAt(0).insertNode(e.doc.createTextNode(r))}e.$c.trigger("tbwchange",n)}catch(t){e.execCmd("insertText",(n.originalEvent||n).clipboardData.getData("text/plain"))}}i.each(e.pasteHandlers,function(e,t){t(n)}),setTimeout(function(){e.semanticCode(!1,!0),e.$c.trigger("tbwpaste",n)},0)}),e.$ta.on("keyup",function(){e.$c.trigger("tbwchange")}).on("paste",function(){setTimeout(function(){e.$c.trigger("tbwchange")},0)}),e.$box.on("keydown",function(t){if(27===t.which&&1===i("."+n+"modal-box",e.$box).length)return e.closeModal(),!1})},autogrowEditorOnEnter:function(){var e=this;e.$ed.removeClass("autogrow-on-enter");var t=e.$ed[0].clientHeight;e.$ed.height("auto");var n=e.$ed[0].scrollHeight;e.$ed.addClass("autogrow-on-enter"),t!==n&&(e.$ed.height(t),setTimeout(function(){e.$ed.css({height:n}),e.$c.trigger("tbwresize")},0))},buildBtnPane:function(){var e=this,t=e.o.prefix,n=e.$btnPane=i("<div/>",{class:t+"button-pane"});i.each(e.o.btns,function(r,s){i.isArray(s)||(s=[s]);var o=i("<div/>",{class:t+"button-group "+(s.indexOf("fullscreen")>=0?t+"right":"")});i.each(s,function(t,n){try{e.isSupportedBtn(n)&&o.append(e.buildBtn(n))}catch(e){}}),o.html().trim().length>0&&n.append(o)}),e.$box.prepend(n)},buildBtn:function(e){var t=this,n=t.o.prefix,r=t.btnsDef[e],s=r.dropdown,o=null==r.hasIcon||r.hasIcon,a=t.lang[e]||e,l=i("<button/>",{type:"button",class:n+e+"-button "+(r.class||"")+(o?"":" "+n+"textual-button"),html:t.hasSvg&&o?'<svg><use xlink:href="'+t.svgPath+"#"+n+(r.ico||e).replace(/([A-Z]+)/g,"-$1").toLowerCase()+'"/></svg>':t.hideButtonTexts?"":r.text||r.title||t.lang[e]||e,title:(r.title||r.text||a)+(r.key?" (Ctrl + "+r.key+")":""),tabindex:-1,mousedown:function(){return s&&!i("."+e+"-"+n+"dropdown",t.$box).is(":hidden")||i("body",t.doc).trigger("mousedown"),!((t.$btnPane.hasClass(n+"disable")||t.$box.hasClass(n+"disabled"))&&!i(this).hasClass(n+"active")&&!i(this).hasClass(n+"not-disable"))&&(t.execCmd(!!s&&"dropdown"||r.fn||e,r.param||e,r.forceCss),!1)}});if(s){l.addClass(n+"open-dropdown");var u=n+"dropdown",c={class:u+"-"+e+" "+u+" "+n+"fixed-top"};c["data-"+u]=e;var h=i("<div/>",c);i.each(s,function(e,n){t.btnsDef[n]&&t.isSupportedBtn(n)&&h.append(t.buildSubBtn(n))}),t.$box.append(h.hide())}else r.key&&(t.keys[r.key]={fn:r.fn||e,param:r.param||e});return s||(t.tagToButton[(r.tag||e).toLowerCase()]=e),l},buildSubBtn:function(e){var t=this,n=t.o.prefix,r=t.btnsDef[e],s=null==r.hasIcon||r.hasIcon;return r.key&&(t.keys[r.key]={fn:r.fn||e,param:r.param||e}),t.tagToButton[(r.tag||e).toLowerCase()]=e,i("<button/>",{type:"button",class:n+e+"-dropdown-button"+(r.ico?" "+n+r.ico+"-button":""),html:t.hasSvg&&s?'<svg><use xlink:href="'+t.svgPath+"#"+n+(r.ico||e).replace(/([A-Z]+)/g,"-$1").toLowerCase()+'"/></svg>'+(r.text||r.title||t.lang[e]||e):r.text||r.title||t.lang[e]||e,title:r.key?" (Ctrl + "+r.key+")":null,style:r.style||null,mousedown:function(){return i("body",t.doc).trigger("mousedown"),t.execCmd(r.fn||e,r.param||e,r.forceCss),!1}})},isSupportedBtn:function(e){try{return this.btnsDef[e].isSupported()}catch(e){}return!0},buildOverlay:function(){var e=this;return e.$overlay=i("<div/>",{class:e.o.prefix+"overlay"}).appendTo(e.$box),e.$overlay},showOverlay:function(){var e=this;i(t).trigger("scroll"),e.$overlay.fadeIn(200),e.$box.addClass(e.o.prefix+"box-blur")},hideOverlay:function(){var e=this;e.$overlay.fadeOut(50),e.$box.removeClass(e.o.prefix+"box-blur")},fixedBtnPaneEvents:function(){var e=this,n=e.o.fixedFullWidth,r=e.$box;e.o.fixedBtnPane&&(e.isFixed=!1,i(t).on("scroll."+e.eventNamespace+" resize."+e.eventNamespace,function(){if(r){e.syncCode();var s=i(t).scrollTop(),o=r.offset().top+1,a=e.$btnPane,l=a.outerHeight()-2;s-o>0&&s-o-e.height<0?(e.isFixed||(e.isFixed=!0,a.css({position:"fixed",top:0,left:n?"0":"auto",zIndex:7}),i([e.$ta,e.$ed]).css({marginTop:a.height()})),a.css({width:n?"100%":r.width()-1+"px"}),i("."+e.o.prefix+"fixed-top",r).css({position:n?"fixed":"absolute",top:n?l:l+(s-o)+"px",zIndex:15})):e.isFixed&&(e.isFixed=!1,a.removeAttr("style"),i([e.$ta,e.$ed]).css({marginTop:0}),i("."+e.o.prefix+"fixed-top",r).css({position:"absolute",top:l}))}}))},setDisabled:function(e){var t=this,n=t.o.prefix;t.disabled=e,e?t.$ta.attr("disabled",!0):t.$ta.removeAttr("disabled"),t.$box.toggleClass(n+"disabled",e),t.$ed.attr("contenteditable",!e)},destroy:function(){var e=this,n=e.o.prefix;e.isTextarea?e.$box.after(e.$ta.css({height:""}).val(e.html()).removeClass(n+"textarea").show()):e.$box.after(e.$ed.css({height:""}).removeClass(n+"editor").removeAttr("contenteditable").removeAttr("dir").html(e.html()).show()),e.$ed.off("dblclick","img"),e.destroyPlugins(),e.$box.remove(),e.$c.removeData("trumbowyg"),i("body").removeClass(n+"body-fullscreen"),e.$c.trigger("tbwclose"),i(t).off("scroll."+e.eventNamespace+" resize."+e.eventNamespace)},empty:function(){this.$ta.val(""),this.syncCode(!0)},toggle:function(){var e=this,t=e.o.prefix;e.o.autogrowOnEnter&&(e.autogrowOnEnterDontClose=!e.$box.hasClass(t+"editor-hidden")),e.semanticCode(!1,!0),setTimeout(function(){e.doc.activeElement.blur(),e.$box.toggleClass(t+"editor-hidden "+t+"editor-visible"),e.$btnPane.toggleClass(t+"disable"),i("."+t+"viewHTML-button",e.$btnPane).toggleClass(t+"active"),e.$box.hasClass(t+"editor-visible")?e.$ta.attr("tabindex",-1):e.$ta.removeAttr("tabindex"),e.o.autogrowOnEnter&&!e.autogrowOnEnterDontClose&&e.autogrowEditorOnEnter()},0)},dropdown:function(e){var n=this,r=n.doc,s=n.o.prefix,o=i("[data-"+s+"dropdown="+e+"]",n.$box),a=i("."+s+e+"-button",n.$btnPane),l=o.is(":hidden");if(i("body",r).trigger("mousedown"),l){var u=a.offset().left;a.addClass(s+"active"),o.css({position:"absolute",top:a.offset().top-n.$btnPane.offset().top+a.outerHeight(),left:n.o.fixedFullWidth&&n.isFixed?u+"px":u-n.$btnPane.offset().left+"px"}).show(),i(t).trigger("scroll"),i("body",r).on("mousedown."+n.eventNamespace,function(e){o.is(e.target)||(i("."+s+"dropdown",n.$box).hide(),i("."+s+"active",n.$btnPane).removeClass(s+"active"),i("body",r).off("mousedown."+n.eventNamespace))})}},html:function(e){var t=this;return null!=e?(t.$ta.val(e),t.syncCode(!0),t.$c.trigger("tbwchange"),t):t.$ta.val()},syncTextarea:function(){var e=this;e.$ta.val(e.$ed.text().trim().length>0||e.$ed.find("hr,img,embed,iframe,input").length>0?e.$ed.html():"")},syncCode:function(e){var t=this;if(!e&&t.$ed.is(":visible"))t.syncTextarea();else{var n=i("<div>").html(t.$ta.val()),r=i("<div>").append(n);i(t.o.tagsToRemove.join(","),r).remove(),t.$ed.html(r.contents().html())}if(t.o.autogrow&&(t.height=t.$ed.height(),t.height!==t.$ta.css("height")&&(t.$ta.css({height:t.height}),t.$c.trigger("tbwresize"))),t.o.autogrowOnEnter){t.$ed.height("auto");var s=t.autogrowOnEnterWasFocused?t.$ed[0].scrollHeight:t.$ed.css("min-height");s!==t.$ta.css("height")&&(t.$ed.css({height:s}),t.$c.trigger("tbwresize"))}},semanticCode:function(e,t,n){var r=this;if(r.saveRange(),r.syncCode(e),r.o.semantic){if(r.semanticTag("b"),r.semanticTag("i"),r.semanticTag("s"),r.semanticTag("strike"),t){var s=r.o.inlineElementsSelector,o=":not("+s+")";r.$ed.contents().filter(function(){return 3===this.nodeType&&this.nodeValue.trim().length>0}).wrap("<span data-tbw/>");var a=function(e){if(0!==e.length){var t=e.nextUntil(o).addBack().wrapAll("<p/>").parent(),n=t.nextAll(s).first();t.next("br").remove(),a(n)}};a(r.$ed.children(s).first()),r.semanticTag("div",!0),r.$ed.find("p").filter(function(){return(!r.range||this!==r.range.startContainer)&&(0===i(this).text().trim().length&&0===i(this).children().not("br,span").length)}).contents().unwrap(),i("[data-tbw]",r.$ed).contents().unwrap(),r.$ed.find("p:empty").remove()}n||r.restoreRange(),r.syncTextarea()}},semanticTag:function(e,t){var n;if(null!=this.o.semantic&&"object"==typeof this.o.semantic&&this.o.semantic.hasOwnProperty(e))n=this.o.semantic[e];else{if(!0!==this.o.semantic||!this.DEFAULT_SEMANTIC_MAP.hasOwnProperty(e))return;n=this.DEFAULT_SEMANTIC_MAP[e]}i(e,this.$ed).each(function(){var e=i(this);e.wrap("<"+n+"/>"),t&&i.each(e.prop("attributes"),function(){e.parent().attr(this.name,this.value)}),e.contents().unwrap()})},createLink:function(){for(var e,t,n,r=this,s=r.doc.getSelection(),o=s.focusNode,a=(new XMLSerializer).serializeToString(s.getRangeAt(0).cloneContents());["A","DIV"].indexOf(o.nodeName)<0;)o=o.parentNode;if(o&&"A"===o.nodeName){var l=i(o);a=l.text(),e=l.attr("href"),r.o.minimalLinks||(t=l.attr("title"),n=l.attr("target"));var u=r.doc.createRange();u.selectNode(o),s.removeAllRanges(),s.addRange(u)}r.saveRange();var c={url:{label:"URL",required:!0,value:e},text:{label:r.lang.text,value:a}};r.o.minimalLinks||Object.assign(c,{title:{label:r.lang.title,value:t},target:{label:r.lang.target,value:n}}),r.openModalInsert(r.lang.createLink,c,function(e){if(!r.prependUrlPrefix(e.url).length)return!1;var t=i(['<a href="',e.url,'">',e.text||e.url,"</a>"].join(""));return r.o.minimalLinks||(e.title.length>0&&t.attr("title",e.title),e.target.length>0&&t.attr("target",e.target)),r.range.deleteContents(),r.range.insertNode(t[0]),r.syncCode(),r.$c.trigger("tbwchange"),!0})},prependUrlPrefix:function(e){var t=this;return t.urlPrefix?/^([a-z][-+.a-z0-9]*:|\/|#)/i.test(e)?e:/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(e)?"mailto:"+e:t.urlPrefix+e:e},unlink:function(){var e=this,t=e.doc.getSelection(),n=t.focusNode;if(t.isCollapsed){for(;["A","DIV"].indexOf(n.nodeName)<0;)n=n.parentNode;if(n&&"A"===n.nodeName){var i=e.doc.createRange();i.selectNode(n),t.removeAllRanges(),t.addRange(i)}}e.execCmd("unlink",void 0,void 0,!0)},insertImage:function(){var e=this;e.saveRange();var t={url:{label:"URL",required:!0},alt:{label:e.lang.description,value:e.getRangeText()}};e.o.imageWidthModalEdit&&(t.width={}),e.openModalInsert(e.lang.insertImage,t,function(t){e.execCmd("insertImage",t.url);var n=i('img[src="'+t.url+'"]:not([alt])',e.$box);return n.attr("alt",t.alt),e.o.imageWidthModalEdit&&n.attr({width:t.width}),e.syncCode(),e.$c.trigger("tbwchange"),!0})},fullscreen:function(){var e,n=this,r=n.o.prefix,s=r+"fullscreen";n.$box.toggleClass(s),e=n.$box.hasClass(s),i("body").toggleClass(r+"body-fullscreen",e),i(t).trigger("scroll"),n.$c.trigger("tbw"+(e?"open":"close")+"fullscreen")},execCmd:function(e,t,n,i){var r=this;i=!!i||"","dropdown"!==e&&r.$ed.focus();try{r.doc.execCommand("styleWithCSS",!1,n||!1)}catch(e){}try{r[e+i](t)}catch(n){try{e(t)}catch(n){"insertHorizontalRule"===e?t=void 0:"formatBlock"===e&&r.isIE&&(t="<"+t+">"),r.doc.execCommand(e,!1,t),r.syncCode(),r.semanticCode(!1,!0)}"dropdown"!==e&&(r.updateButtonPaneStatus(),r.$c.trigger("tbwchange"))}},openModal:function(e,n){var r=this,s=r.o.prefix;if(i("."+s+"modal-box",r.$box).length>0)return!1;r.o.autogrowOnEnter&&(r.autogrowOnEnterDontClose=!0),r.saveRange(),r.showOverlay(),r.$btnPane.addClass(s+"disable");var o=i("<div/>",{class:s+"modal "+s+"fixed-top"}).css({top:r.$btnPane.height()}).appendTo(r.$box);r.$overlay.one("click",function(){return o.trigger("tbwcancel"),!1});var a=i("<form/>",{action:"",html:n}).on("submit",function(){return o.trigger("tbwconfirm"),!1}).on("reset",function(){return o.trigger("tbwcancel"),!1}).on("submit reset",function(){r.o.autogrowOnEnter&&(r.autogrowOnEnterDontClose=!1)}),l=i("<div/>",{class:s+"modal-box",html:a}).css({top:"-"+r.$btnPane.outerHeight()+"px",opacity:0}).appendTo(o).animate({top:0,opacity:1},100);return i("<span/>",{text:e,class:s+"modal-title"}).prependTo(l),o.height(l.outerHeight()+10),i("input:first",l).focus(),r.buildModalBtn("submit",l),r.buildModalBtn("reset",l),i(t).trigger("scroll"),o},buildModalBtn:function(e,t){var n=this,r=n.o.prefix;return i("<button/>",{class:r+"modal-button "+r+"modal-"+e,type:e,text:n.lang[e]||e}).appendTo(i("form",t))},closeModal:function(){var e=this,t=e.o.prefix;e.$btnPane.removeClass(t+"disable"),e.$overlay.off();var n=i("."+t+"modal-box",e.$box);n.animate({top:"-"+n.height()},100,function(){n.parent().remove(),e.hideOverlay()}),e.restoreRange()},openModalInsert:function(e,t,n){var r=this,s=r.o.prefix,o=r.lang,a="";return i.each(t,function(e,t){var n=t.label||e,i=t.name||e,r=t.attributes||{},l=Object.keys(r).map(function(e){return e+'="'+r[e]+'"'}).join(" ");a+='<label><input type="'+(t.type||"text")+'" name="'+i+'"'+("checkbox"===t.type&&t.value?' checked="checked"':' value="'+(t.value||"").replace(/"/g,"&quot;"))+'"'+l+'><span class="'+s+'input-infos"><span>'+(o[n]?o[n]:n)+"</span></span></label>"}),r.openModal(e,a).on("tbwconfirm",function(){var e=i("form",i(this)),s=!0,o={};i.each(t,function(t,n){var a=n.name||t,l=i('input[name="'+a+'"]',e);switch(l.attr("type").toLowerCase()){case"checkbox":o[a]=l.is(":checked");break;case"radio":o[a]=l.filter(":checked").val();break;default:o[a]=i.trim(l.val())}n.required&&""===o[a]?(s=!1,r.addErrorOnModalField(l,r.lang.required)):n.pattern&&!n.pattern.test(o[a])&&(s=!1,r.addErrorOnModalField(l,n.patternError))}),s&&(r.restoreRange(),n(o,t)&&(r.syncCode(),r.$c.trigger("tbwchange"),r.closeModal(),i(this).off("tbwconfirm")))}).one("tbwcancel",function(){i(this).off("tbwconfirm"),r.closeModal()})},addErrorOnModalField:function(e,t){var n=this.o.prefix,r=e.parent();e.on("change keyup",function(){r.removeClass(n+"input-error")}),r.addClass(n+"input-error").find("input+span").append(i("<span/>",{class:n+"msg-error",text:t}))},getDefaultImgDblClickHandler:function(){var e=this;return function(){var t=i(this),n=t.attr("src");0===n.indexOf("data:image")&&(n="(Base64)");var r={url:{label:"URL",value:n,required:!0},alt:{label:e.lang.description,value:t.attr("alt")}};return e.o.imageWidthModalEdit&&(r.width={value:t.attr("width")?t.attr("width"):""}),e.openModalInsert(e.lang.insertImage,r,function(n){return"(Base64)"!==n.src&&t.attr({src:n.url}),t.attr({alt:n.alt}),e.o.imageWidthModalEdit&&(parseInt(n.width)>0?t.attr({width:n.width}):t.removeAttr("width")),!0}),!1}},saveRange:function(){var e=this,t=e.doc.getSelection();if(e.range=null,t.rangeCount){var n,i=e.range=t.getRangeAt(0),r=e.doc.createRange();r.selectNodeContents(e.$ed[0]),r.setEnd(i.startContainer,i.startOffset),n=(r+"").length,e.metaRange={start:n,end:n+(i+"").length}}},restoreRange:function(){var e,t=this,n=t.metaRange,i=t.range,r=t.doc.getSelection();if(i){if(n&&n.start!==n.end){var s,o=0,a=[t.$ed[0]],l=!1,u=!1;for(e=t.doc.createRange();!u&&(s=a.pop());)if(3===s.nodeType){var c=o+s.length;!l&&n.start>=o&&n.start<=c&&(e.setStart(s,n.start-o),l=!0),l&&n.end>=o&&n.end<=c&&(e.setEnd(s,n.end-o),u=!0),o=c}else for(var h=s.childNodes,d=h.length;d>0;)d-=1,a.push(h[d])}r.removeAllRanges(),r.addRange(e||i)}},getRangeText:function(){return this.range+""},updateButtonPaneStatus:function(){var e=this,t=e.o.prefix,n=e.getTagsRecursive(e.doc.getSelection().focusNode),r=t+"active-button "+t+"active";i("."+t+"active-button",e.$btnPane).removeClass(r),i.each(n,function(n,s){var o=e.tagToButton[s.toLowerCase()],a=i("."+t+o+"-button",e.$btnPane);if(a.length>0)a.addClass(r);else try{a=i("."+t+"dropdown ."+t+o+"-dropdown-button",e.$box);var l=a.parent().data("dropdown");i("."+t+l+"-button",e.$box).addClass(r)}catch(e){}})},getTagsRecursive:function(e,t){var n=this;if(t=t||(e&&e.tagName?[e.tagName]:[]),!e||!e.parentNode)return t;e=e.parentNode;var r=e.tagName;return"DIV"===r?t:("P"===r&&""!==e.style.textAlign&&t.push(e.style.textAlign),i.each(n.tagHandlers,function(i,r){t=t.concat(r(e,n))}),t.push(r),n.getTagsRecursive(e,t).filter(function(e){return null!=e}))},initPlugins:function(){var e=this;e.loadedPlugins=[],i.each(i.trumbowyg.plugins,function(t,n){n.shouldInit&&!n.shouldInit(e)||(n.init(e),n.tagHandler&&e.tagHandlers.push(n.tagHandler),e.loadedPlugins.push(n))})},destroyPlugins:function(){i.each(this.loadedPlugins,function(e,t){t.destroy&&t.destroy()})}}}(navigator,window,document,jQuery),jQuery.trumbowyg.langs.ru={viewHTML:"Посмотреть HTML",undo:"Отменить",redo:"Повторить",formatting:"Форматирование",p:"Обычный",blockquote:"Цитата",code:"Код",header:"Заголовок",bold:"Полужирный",italic:"Курсив",strikethrough:"Зачеркнутый",underline:"Подчеркнутый",strong:"Полужирный",em:"Курсив",del:"Зачеркнутый",superscript:"Надстрочный",subscript:"Подстрочный",unorderedList:"Обычный список",orderedList:"Нумерованный список",insertImage:"Вставить изображение",insertVideo:"Вставить видео",link:"Ссылка",createLink:"Вставить ссылку",unlink:"Удалить ссылку",justifyLeft:"По левому краю",justifyCenter:"По центру",justifyRight:"По правому краю",justifyFull:"По ширине",horizontalRule:"Горизонтальная линия",removeformat:"Очистить форматирование",fullscreen:"Во весь экран",close:"Закрыть",submit:"Вставить",reset:"Отменить",required:"Обязательное",description:"Описание",title:"Подсказка",text:"Текст"},$(function(){$(document).on("click",".more-lecture",function(){var e=$(this).parents(".member-additional-form"),t=$(this).parents(".form-block").find(".lecture-form").length;return $(".more-lecture").hide(),$.ajax({url:"/lecture",method:"GET",data:{index:t},success:function(t){var n=$(t);n.find(".lecture-textarea").trumbowyg({btns:[["formatting"],["bold","italic"],["justifyLeft","justifyCenter","justifyRight","justifyFull"]],lang:"ru"}),n.find(".js-file-input").fileInput(),e.after(n),n.find("input").first().focus()}}),!1}),$(document).on("keyup","[data-translate-for]",function(){var e=$(this).val();$($(this).data("translate-for")).val(toLatin(e))}),$.trumbowyg.svgPath="/assets/images/icons.svg",$(".lecture-textarea").trumbowyg({btns:[["formatting"],["bold","italic"],["justifyLeft","justifyCenter","justifyRight","justifyFull"]],lang:"ru"}),$("[data-settings]").each(function(){var e=$(this).data("settings");$(this).find("select").on("change",function(){window.settingsTimeout&&clearTimeout(window.settingsTimeout),window.settingsTimeout=setTimeout(function(){var e=window.location.href.split("?")[0]+"?",t=$("[data-settings] select").length;$("[data-settings] select").each(function(n){e+=$(this).attr("name")+"="+$(this).val(),n!==t-1&&(e+="&")}),document.location.href=e},e)})})});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
